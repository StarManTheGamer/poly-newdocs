{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"directory/","title":"Directory","text":""},{"location":"directory/#removed-classes","title":"Removed Classes","text":"<ul> <li>UI</li> <li>Remote Events (TO-DO)</li> </ul>"},{"location":"directory/#game","title":"Game","text":"<ul> <li>  Backpack</li> <li>  Environment</li> <li>  Game</li> <li>  Hidden</li> <li>  Lighting</li> <li>  Player</li> <li>  PlayerDefaults</li> <li>  Players</li> <li>  ScriptService</li> </ul>"},{"location":"directory/#world","title":"World","text":"<ul> <li>  BasePart</li> <li>  Climbable</li> <li>  Folder</li> <li>  MeshPart</li> <li>  Model</li> <li>  NPC</li> <li>  Part</li> <li>  Seat</li> <li>  Text3D</li> <li>  Tool</li> <li>  Truss</li> </ul>"},{"location":"directory/#effects","title":"Effects","text":"<ul> <li>  Decal</li> <li>  ImageSky</li> <li>  PointLight</li> <li>  Sound</li> <li>  SpotLight</li> </ul>"},{"location":"directory/#physics","title":"Physics","text":"<ul> <li>  BodyPosition</li> </ul>"},{"location":"directory/#scripting","title":"Scripting","text":"<ul> <li>  BaseScript</li> <li>  LocalScript</li> <li>  ModuleScript</li> <li>  NetworkEvent</li> <li>  ScriptInstance</li> </ul>"},{"location":"directory/#values","title":"Values","text":"<ul> <li>  BoolValue</li> <li>  ColorValue</li> <li>  InstanceValue</li> <li>  IntValue</li> <li>  NumberValue</li> <li>  StringValue</li> <li>  ValueBase</li> <li>  Vector3Value</li> </ul>"},{"location":"directory/#system","title":"System","text":"<ul> <li>  DynamicInstance</li> <li>  Instance</li> </ul>"},{"location":"directory/#ui","title":"UI","text":"<ul> <li>  GUI</li> <li>  PlayerGUI</li> <li>  UIButton</li> <li>  UIField</li> <li>  UIHVLayout</li> <li>  UIHorizontalLayout</li> <li>  UIImage</li> <li>  UILabel</li> <li>  UITextInput</li> <li>  UIVerticalLayout</li> <li>  UIView</li> </ul>"},{"location":"directory/#enums","title":"Enums","text":"<ul> <li>  AmbientSource</li> <li>  CameraMode</li> <li>  HorizontalAlignment</li> <li>  ImageType</li> <li>  PartMaterial</li> <li>  PartShape</li> <li>  SkyboxPreset</li> <li>  TextFontPreset</li> <li>  TextJustify</li> <li>  TextVerticalAlign</li> <li>  TweenStyle</li> <li>  VerticalAlignment</li> </ul>"},{"location":"directory/#static-classes","title":"Static Classes","text":"<ul> <li>  Achievements</li> <li>  Camera</li> <li>  Chat</li> <li>  CoreUI</li> <li>  Datastore</li> <li>  Http</li> <li>  Input</li> <li>:polytoria-Json: Json</li> <li>  Tween</li> </ul>"},{"location":"directory/#types","title":"Types","text":"<ul> <li>  Color</li> <li>  NetMessage</li> <li>  RayResult</li> <li>  Vector2</li> <li>  Vector3</li> </ul>"},{"location":"objects/effects/","title":"Effects &amp; Utilities","text":"<ul> <li>  Decal</li> <li>  ImageSky</li> <li>  PointLight</li> <li>  Sound</li> <li>  SpotLight</li> </ul>"},{"location":"objects/effects/Decal/","title":"Decal","text":"<p>  Decals are objects that can have an image texture and are placed in the world.</p>"},{"location":"objects/effects/Decal/#properties","title":"Properties","text":""},{"location":"objects/effects/Decal/#ImageType","title":"ImageType :       ImageType","text":"<p>The type of image to be used.</p>"},{"location":"objects/effects/Decal/#ImageID","title":"ImageID : <code>number</code>","text":"<p>Specifies the image asset ID of the decal.</p> <p>Example</p> <pre><code>game[\"Environment\"][\"Decal\"].ImageID = 11643\n</code></pre>"},{"location":"objects/effects/Decal/#TextureOffset","title":"TextureOffset :      Vector2","text":"<p>The offset of the texture on the decal.</p>"},{"location":"objects/effects/Decal/#TextureScale","title":"TextureScale :      Vector2","text":"<p>The scale of the texture on the decal.</p> <p>Example</p> <pre><code>game[\"Environment\"][\"Decal\"].ImageID = 11643\n</code></pre>"},{"location":"objects/effects/ImageSky/","title":"ImageSky","text":"<p>  ImageSky is a class that is used to set a custom image skybox in the world. You can set the images used for the individual sides of the skybox by changing the ID properties. Any image from the library can be used for the skybox.</p>"},{"location":"objects/effects/ImageSky/#properties","title":"Properties","text":""},{"location":"objects/effects/ImageSky/#BackId","title":"BackId : <code>number</code>","text":"<p>The image ID of the back side of the skybox.</p>"},{"location":"objects/effects/ImageSky/#BottomId","title":"BottomId : <code>number</code>","text":"<p>The image ID of the bottom side of the skybox.</p>"},{"location":"objects/effects/ImageSky/#FrontId","title":"FrontId : <code>number</code>","text":"<p>The image ID of the front side of the skybox.</p>"},{"location":"objects/effects/ImageSky/#LeftId","title":"LeftId : <code>number</code>","text":"<p>The image ID of the left side of the skybox.</p>"},{"location":"objects/effects/ImageSky/#RightId","title":"RightId : <code>number</code>","text":"<p>The image ID of the right side of the skybox.</p>"},{"location":"objects/effects/ImageSky/#TopId","title":"TopId : <code>number</code>","text":"<p>The image ID of the top side of the skybox.</p>"},{"location":"objects/effects/PointLight/","title":"PointLight","text":"<p>  PointLight is a source of light that can be placed in the world.</p>"},{"location":"objects/effects/PointLight/#properties","title":"Properties","text":""},{"location":"objects/effects/PointLight/#Brightness","title":"Brightness : <code>number</code>","text":"<p>Specifies how bright/intense the light is.</p> <p>Example</p> <pre><code>light.Brightness = 0.75\n</code></pre>"},{"location":"objects/effects/PointLight/#Color","title":"Color :            Color","text":"<p>Specifies the color of the light.</p> <p>Example</p> <pre><code>light.Color = Color.Random()\n</code></pre>"},{"location":"objects/effects/PointLight/#Range","title":"Range : <code>number</code>","text":"<p>Specifies how far out the light can reach.</p> <p>Example</p> <pre><code>light.Range = 60\n</code></pre>"},{"location":"objects/effects/PointLight/#Shadows","title":"Shadows : <code>boolean</code>","text":"<p>Specifies whether this light emits shadows or not.</p> <p>Example</p> <pre><code>light.Shadows = true\n</code></pre>"},{"location":"objects/effects/Sound/","title":"Sound","text":"<p>  Sounds are objects that can be placed in the world and emit audio.</p>"},{"location":"objects/effects/Sound/#events","title":"Events","text":""},{"location":"objects/effects/Sound/#Loaded","title":"Loaded","text":"<p>The event that is fired when the sound is loaded from the server.</p> <p>Example</p> <pre><code>sound.Loaded:Connect(function()\n    sound.Play()\nend)\n</code></pre>"},{"location":"objects/effects/Sound/#methods","title":"Methods","text":""},{"location":"objects/effects/Sound/#Play","title":"Play \u2192 <code>void</code>","text":"<p>Plays the sound.</p>"},{"location":"objects/effects/Sound/#Stop","title":"Stop \u2192 <code>void</code>","text":"<p>Stops playing the sound.</p>"},{"location":"objects/effects/Sound/#properties","title":"Properties","text":""},{"location":"objects/effects/Sound/#Autoplay","title":"Autoplay : <code>boolean</code>","text":"<p>Determines whether the sound should start playing automatically.</p>"},{"location":"objects/effects/Sound/#Length","title":"Length : <code>number</code>","text":"<p>Returns the length of the currently loaded audio</p>"},{"location":"objects/effects/Sound/#Loop","title":"Loop : <code>boolean</code>","text":"<p>Determines whether the sound should loop or not.</p>"},{"location":"objects/effects/Sound/#Pitch","title":"Pitch : <code>number</code>","text":"<p>The pitch property of this sound</p>"},{"location":"objects/effects/Sound/#PlayInWorld","title":"PlayInWorld : <code>boolean</code>","text":"<p>When enabled, the sound will be played in 3D world space rather than having the same volume for everyone.</p>"},{"location":"objects/effects/Sound/#Playing","title":"Playing : <code>boolean</code>","text":"<p>Determines whether the sound is currently playing or not.</p>"},{"location":"objects/effects/Sound/#Size","title":"Size :       Vector3","text":"<p>Property description (what?? change this later)</p>"},{"location":"objects/effects/Sound/#SoundID","title":"SoundID : <code>number</code>","text":"<p>The asset ID of the sound.</p>"},{"location":"objects/effects/Sound/#Time","title":"Time : <code>number</code>","text":"<p>The time position the track is currently on.</p>"},{"location":"objects/effects/Sound/#Volume","title":"Volume : <code>number</code>","text":"<p>The volume of the sound.</p>"},{"location":"objects/effects/SpotLight/","title":"SpotLight","text":"<p>  SpotLight is a source of light emitting in a specific direction and angle that can be placed in the world.</p>"},{"location":"objects/effects/SpotLight/#properties","title":"Properties","text":""},{"location":"objects/effects/SpotLight/#Angle","title":"Angle : <code>number</code>","text":"<p>Specifies the angle of the spotlight.</p>"},{"location":"objects/effects/SpotLight/#Brightness","title":"Brightness : <code>number</code>","text":"<p>Specifies how bright/intense the light is.</p>"},{"location":"objects/effects/SpotLight/#Color","title":"Color :            Color","text":"<p>Specifies the color of the light.</p>"},{"location":"objects/effects/SpotLight/#Range","title":"Range : <code>number</code>","text":"<p>Specifies how far out the light can reach.</p>"},{"location":"objects/effects/SpotLight/#Shadows","title":"Shadows : <code>boolean</code>","text":"<p>Specifies whether this light emits shadows or not.</p>"},{"location":"objects/enums/","title":"Enums","text":"<ul> <li>  AmbientSource</li> <li>  CameraMode</li> <li>  HorizontalAlignment</li> <li>  ImageType</li> <li>  PartMaterial</li> <li>  PartShape</li> <li>  SkyboxPreset</li> <li>  TextFontPreset</li> <li>  TextJustify</li> <li>  TextVerticalAlign</li> <li>  TweenStyle</li> <li>  VerticalAlignment</li> </ul>"},{"location":"objects/enums/AmbientSource/","title":"AmbientSource","text":"Name Value Description <code>AmbientSource.Skybox</code> 0 Ambient light is taken from the sky <code>AmbientSource.AmbientColor</code> 1 Ambient light is taken from the <code>Lighting.AmbientColor</code> property"},{"location":"objects/enums/CameraMode/","title":"CameraMode","text":"Name Description <code>CameraMode.Scripted</code> Camera is able to be controlled by scripts <code>CameraMode.FollowPlayer</code> Camera is controlled by the player <code>(default)</code> <code>CameraMode.FreeCam</code> Camera is able to be freely moved by the player"},{"location":"objects/enums/HorizontalAlignment/","title":"HorizontalAlignment","text":"<p>This is undocumented on the original documentation - this is interpreted from references on the original documentation</p> Name Description <code>HorizontalAlignment.Left</code> Aligned to the left <code>HorizontalAlignment.Middle</code> Aligned to the middle <code>(default)</code> <code>HorizontalAlignment.Right</code> Aligned to the right"},{"location":"objects/enums/ImageType/","title":"ImageType","text":"Name <code>Asset</code> <code>AssetThumbnail</code> <code>PlaceThumbnail</code> <code>UserAvatarHeadshot</code> <code>GuildIcon</code>"},{"location":"objects/enums/PartMaterial/","title":"PartMaterial","text":"Name Value <code>PartMaterial.SmoothPlastic</code> 0 <code>PartMaterial.Wood</code> 1 <code>PartMaterial.Concrete</code> 2 <code>PartMaterial.Neon</code> 3 <code>PartMaterial.Metal</code> 4 <code>PartMaterial.Brick</code> 5 <code>PartMaterial.Grass</code> 6 <code>PartMaterial.Dirt</code> 7 <code>PartMaterial.Stone</code> 8 <code>PartMaterial.Snow</code> 9 <code>PartMaterial.Ice</code> 10 <code>PartMaterial.RustyIron</code> 11 <code>PartMaterial.Sand</code> 12 <code>PartMaterial.Sandstone</code> 13 <code>PartMaterial.Plastic</code> 14 <code>PartMaterial.Plywood</code> 15 <code>PartMaterial.Planks</code> 16"},{"location":"objects/enums/PartShape/","title":"PartShape","text":"Name Value <code>PartShape.Ball</code> 0 <code>PartShape.Brick</code> 1 <code>PartShape.Cylinder</code> 2 <code>PartShape.Wedge</code> 3 <code>PartShape.Truss</code> 4 <code>PartShape.TrussFrame</code> 5 <code>PartShape.Bevel</code> 6 <code>PartShape.QuarterPipe</code> 7"},{"location":"objects/enums/SkyboxPreset/","title":"SkyboxPreset","text":"Name Value Description <code>SkyboxPreset.Day1</code> 0 A blue sky with clouds <code>SkyboxPreset.Day2</code> 1 A blue sky with clouds <code>SkyboxPreset.Day3</code> 2 A blue sky with clouds <code>SkyboxPreset.Day4</code> 3 A blue sky with clouds <code>SkyboxPreset.Day5</code> 4 A blue sky with clouds <code>SkyboxPreset.Day6</code> 5 A blue sky with clouds <code>SkyboxPreset.Day7</code> 6 A blue sky with clouds <code>SkyboxPreset.Morning1</code> 7 A morning sky with clouds <code>SkyboxPreset.Morning2</code> 8 A morning sky with clouds <code>SkyboxPreset.Morning3</code> 9 A morning sky with clouds <code>SkyboxPreset.Morning4</code> 10 A morning sky with clouds <code>SkyboxPreset.Night1</code> 11 A night sky with stars <code>SkyboxPreset.Night2</code> 12 A night sky with stars <code>SkyboxPreset.Night3</code> 13 A night sky with stars <code>SkyboxPreset.Night4</code> 14 A night sky with stars <code>SkyboxPreset.Night5</code> 15 A night sky with stars <code>SkyboxPreset.Sunset1</code> 16 A dusk, red sky with clouds <code>SkyboxPreset.Sunset2</code> 17 A dusk, red sky with clouds <code>SkyboxPreset.Sunset3</code> 18 A dusk, red sky with clouds <code>SkyboxPreset.Sunset4</code> 19 A dusk, red sky with clouds <code>SkyboxPreset.Sunset5</code> 20 A dusk, red sky with clouds"},{"location":"objects/enums/TextFontPreset/","title":"TextFontPreset","text":""},{"location":"objects/enums/TextFontPreset/#textfontpreset","title":"TextFontPreset","text":"Name <p>SourceSans</p> <p>PressStart2P</p> <p>Montserrat</p> <p>RobotoMono</p> <p>Rubik</p> <p>Poppins</p> <p>Domine</p> <p>Fredoka</p> <p>ComicNeue</p> <p>Orbitron</p>"},{"location":"objects/enums/TextJustify/","title":"TextJustify","text":"Name <code>TextJustify.Left</code> <code>TextJustify.Center</code> <code>TextJustify.Right</code> <code>TextJustify.Justify</code> <code>TextJustify.Flush</code>"},{"location":"objects/enums/TextVerticalAlign/","title":"TextVerticalAlign","text":"Name <code>TextVerticalAlign.Top</code> <code>TextVerticalAlign.Middle</code> <code>TextVerticalAlign.Bottom</code>"},{"location":"objects/enums/TweenStyle/","title":"TweenStyle","text":"Name easeInBack easeInBounce easeInCirc easeInCubic easeInElastic easeInExpo easeInOutBack easeInOutBounce easeInOutCirc easeInOutCubic easeInOutElastic easeInOutExpo easeInOutQuad easeInOutQuart easeInOutQuint easeInOutSine easeInQuad easeInQuart easeInQuint easeInSine easeOutBack easeOutBounce easeOutCirc easeOutCubic easeOutElastic easeOutExpo easeOutQuad easeOutQuart easeOutQuint easeOutSine linear punch"},{"location":"objects/enums/VerticalAlignment/","title":"VerticalAlignment","text":"<p>This is undocumented on the original documentation - this is interpreted from references on the original documentation</p> Name Description <code>VerticalAlignment.Top</code> Aligned to the top <code>VerticalAlignment.Middle</code> Aligned to the middle <code>VerticalAlignment.Bottom</code> Aligned to the bottom"},{"location":"objects/game/","title":"Game","text":"<ul> <li>  Backpack</li> <li>  Environment</li> <li>  Game</li> <li>  Hidden</li> <li>  Lighting</li> <li>  Player</li> <li>  PlayerDefaults</li> <li>  Players</li> <li>  ScriptService</li> </ul>"},{"location":"objects/game/Backpack/","title":"Backpack","text":"<p>  Backpack is a child of player used for storing tools.</p>"},{"location":"objects/game/Environment/","title":"Environment","text":"<p>  Environment is the primary object intended for storing active objects in the place.</p>"},{"location":"objects/game/Environment/#methods","title":"Methods","text":""},{"location":"objects/game/Environment/#CreateExplosion","title":"CreateExplosion \u2192 <code>void</code>","text":"Parameters <p>Position [   Vector3 ]</p> <p>Radius [ <code>number</code> = <code>10</code> ]</p> <p>Force [ <code>number</code> = <code>5000</code> ]</p> <p>affectAnchored [ <code>boolean</code> = <code>true</code> ]</p> <p>callback [ <code>function</code> = <code>nil</code> ]</p> <p>Creates a deadly explosion killing players and applying force to parts at the given position.</p> <p>Example</p> <pre><code>game[\"Environment\"]:CreateExplosion(Vector3.New(0, 0, 0), 30, 5000, false)\n</code></pre>"},{"location":"objects/game/Environment/#Raycast","title":"Raycast \u2192        RayResult","text":"Parameters <p>origin [   Vector3 ]</p> <p>direction [   Vector3 ]</p> <p>maxDistance [ <code>number</code> = <code>infinite</code> ]</p> <p>ignoreList [ <code>array</code> = <code>Instance[]</code> ]</p> <p>Casts a ray from origin with a specified direction and returns a RayResult for the first hit object.</p> <p>Example</p> <pre><code>local hit = game[\"Environment\"]:Raycast(barrel.Position, barrel.Forward)\n\nif hit and hit.Instance:IsA(\"Player\") then\n    hit.Instance.Health = 0\nend\n</code></pre>"},{"location":"objects/game/Environment/#RaycastAll","title":"RaycastAll \u2192        RayResult","text":"Parameters <p>origin [   Vector3 ]</p> <p>direction [   Vector3 ]</p> <p>maxDistance [ <code>number</code> = <code>infinite</code> ]</p> <p>ignoreList [ <code>array</code> = <code>Instance[]</code> ]</p> <p>Casts a ray from origin with a specified direction and returns a RayResult array for all hit objects.</p> <p>Example</p> <pre><code>local hits = game[\"Environment\"]:RaycastAll(Vector3.New(0, 10, 0), Vector3.New(0, -1, 0), 100)\n\nfor i, hit in pairs(hits) do\n    print(\"Hit at \" .. hit.Position .. \"!\")\nend\n</code></pre>"},{"location":"objects/game/Environment/#properties","title":"Properties","text":""},{"location":"objects/game/Environment/#FogColor","title":"FogColor :            Color","text":"<p>The color of the fog. Fog is a visual effect that makes the world look like it is covered in a colored mist.</p> <p>Example</p> <p>Change the fog color to white:</p> <pre><code>game[\"Environment\"].FogColor = Color.New(1, 1, 1, 1)\n</code></pre>"},{"location":"objects/game/Environment/#FogEnabled","title":"FogEnabled : <code>boolean</code>","text":"<p>Whether or not fog is enabled.</p>"},{"location":"objects/game/Environment/#FogStartDistance","title":"FogStartDistance : <code>number</code>","text":"<p>The distance from the camera at which fog starts to appear</p>"},{"location":"objects/game/Environment/#FogEndDistance","title":"FogEndDistance : <code>number</code>","text":"<p>The distance from the camera at which fog is fully opaque</p>"},{"location":"objects/game/Environment/#Gravity","title":"Gravity :       Vector3 = <code>Vector3.New(0, -75, 0)</code>","text":"<p>The direction and strength of gravity in the world</p>"},{"location":"objects/game/Environment/#PartDestroyHeight","title":"PartDestroyHeight : <code>number</code>","text":"<p>The height at which unanchored parts are destroyed when they fall below it.</p> <p>Example</p> <pre><code>game[\"Environment\"].PartDestroyHeight = -2000\n</code></pre>"},{"location":"objects/game/Environment/#Skybox","title":"Skybox :       SkyboxPreset","text":"<p>The default skybox preset to use for the world, if no ImageSky is present.</p>"},{"location":"objects/game/Game/","title":"Game","text":"<p>  Game is the root object in the Polytoria instance tree. It is the object of which everything is descended.</p>"},{"location":"objects/game/Game/#events","title":"Events","text":""},{"location":"objects/game/Game/#Rendered","title":"Rendered","text":"<p>Called every frame after the place has been rendered</p>"},{"location":"objects/game/Game/#properties","title":"Properties","text":""},{"location":"objects/game/Game/#GameID","title":"GameID : <code>number</code>","text":"<p>The ID of the current Polytoria place.</p> <p>Example</p> <pre><code>print(game.GameID)\n</code></pre>"},{"location":"objects/game/Game/#InstanceCount","title":"InstanceCount : <code>number</code>","text":"<p>The total number of instances currently loaded</p> <p>Example</p> <pre><code>print(game.InstanceCount)\n</code></pre>"},{"location":"objects/game/Game/#LocalInstanceCount","title":"LocalInstanceCount : <code>number</code>","text":"<p>The amount of instances currently loaded on the client.</p> <p>Example</p> <pre><code>print(game.LocalInstanceCount)\n</code></pre>"},{"location":"objects/game/Game/#PlayersConnected","title":"PlayersConnected : <code>number</code>","text":"<p>Returns the amount of players connected to the game.</p> <p>Example</p> <pre><code>print(game.PlayersConnected)\n</code></pre> <p>This property is read-only and cannot be modified.</p>"},{"location":"objects/game/Hidden/","title":"Hidden","text":"<p>  Hidden is a service used for hiding instances.</p>"},{"location":"objects/game/Lighting/","title":"Lighting","text":"<p>  Lighting is responsible for controlling the state of the lighting in the place. It provides many different options for creators to enhance and fine-tune the visuals of their worlds.</p> <p>By parenting an   ImageSky object to Lighting, you can change the skybox of the world.</p>"},{"location":"objects/game/Lighting/#properties","title":"Properties","text":""},{"location":"objects/game/Lighting/#AmbientColor","title":"AmbientColor :            Color","text":"<p>The color of the ambient light. Ambient light is light that is not coming from any particular direction, and is used to simulate light bouncing off of surfaces.</p> <p>This property is only used if   AmbientSource is set to <code>AmbientSource.AmbientColor</code>.</p>"},{"location":"objects/game/Lighting/#AmbientSource","title":"AmbientSource :       AmbientSource","text":"<p>The source of the ambient light</p>"},{"location":"objects/game/Lighting/#SunBrightness","title":"SunBrightness : <code>number</code>","text":"<p>The brightness of the sun</p>"},{"location":"objects/game/Lighting/#SunColor","title":"SunColor :            Color","text":"<p>The color of the sun. This affects the color of the ambient lighting in the environment.</p>"},{"location":"objects/game/Lighting/#Shadows","title":"Shadows : <code>boolean</code>","text":"<p>Whether or not shadows are enabled</p>"},{"location":"objects/game/Player/","title":"Player","text":"<p>Not to be confused with   Players, the service object that contains all connected players.</p> <p>  Player is the class of the player and it's character controlled by it's player.</p>"},{"location":"objects/game/Player/#events","title":"Events","text":""},{"location":"objects/game/Player/#Chatted","title":"Chatted","text":"<p>Parameters: message [ <code>string</code> ]</p> <p>Fires when the player sends a chat message.</p> <p>Example</p> <pre><code>game[\"Players\"][\"willemsteller\"].Chatted:Connect(function (message)\n    print(\"Player wrote: \" .. message)\nend)\n</code></pre>"},{"location":"objects/game/Player/#Died","title":"Died","text":"<p>Fires when the player dies.</p> <p>Example</p> <pre><code>game[\"Players\"][\"willemsteller\"].Died:Connect(function ()\n    print(\"Player died\")\nend)\n</code></pre>"},{"location":"objects/game/Player/#Respawned","title":"Respawned","text":"<p>Fires when the player respawns.</p> <p>Example</p> <pre><code>game[\"Players\"][\"willemsteller\"].Respawned:Connect(function ()\n    print(\"Player has respawned\")\nend)\n</code></pre>"},{"location":"objects/game/Player/#methods","title":"Methods","text":""},{"location":"objects/game/Player/#DropTools","title":"DropTools \u2192 <code>void</code>","text":"<p>Drops the tool the player is currently holding.</p> <p>This is only available to the server. It can only be accessed within server scripts.</p>"},{"location":"objects/game/Player/#Kick","title":"Kick \u2192 <code>void</code>","text":"<p>Parameters: Reason [ <code>string</code> ] - this parameter is optional</p> <p>Kicks the player from the server with an optional reason parameter.</p> <p>This is only available to the server. It can only be accessed within server scripts.</p> <p>Example</p> <pre><code>game[\"Players\"].PlayerAdded:Connect(function(player)\n    if player.Name == \"baggy\" then\n        player:Kick(\"Baggy u stink!!!\")\n    end\nend)\n</code></pre>"},{"location":"objects/game/Player/#LoadAppearance","title":"LoadAppearance \u2192 <code>void</code>","text":"<p>Parameters: userID [ <code>number</code> ]</p> <p>Loads the specified user ID's avatar on the player.</p> <p>Example</p> <pre><code>-- Loads the appearance of willemsteller\nplayer:LoadAppearance(2)\n</code></pre>"},{"location":"objects/game/Player/#ClearAppearance","title":"ClearAppearance \u2192 <code>void</code>","text":"<p>Clears the player's appearance. This will set their appearance to a gray avatar.</p> <p>Example</p> <pre><code>-- Clears the appearance of the player\nplayer:ClearAppearance()\n</code></pre>"},{"location":"objects/game/Player/#OwnsItem","title":"OwnsItem \u2192 <code>void</code>","text":"Parameters <p>assetID [ <code>number</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Checks if the player owns an item</p> <p>There is a limit of 30 requests that can be made per minute per server.</p> <p>Example</p> <pre><code>player:OwnsItem(24122, function(error, owns)\n    if error then\n        print(\"An error occurred!\")\n    else\n        if owns then\n            print(\"Player owns Polytoria Cap!\")\n        else\n            print(\"Player does not own Polytoria Cap!\")\n        end\n    end\nend)\n</code></pre>"},{"location":"objects/game/Player/#ResetAppearance","title":"ResetAppearance \u2192 <code>void</code>","text":"<p>Resets the player's appearance to their original appearance.</p> <p>Example</p> <pre><code>-- Resets the player's appearance back to their avatar\nplayer:ResetAppearance()\n</code></pre>"},{"location":"objects/game/Player/#Respawn","title":"Respawn \u2192 <code>void</code>","text":"<p>Respawns the player.</p>"},{"location":"objects/game/Player/#Sit","title":"Sit \u2192 <code>void</code>","text":"<p>Parameters: Seat [   Seat ]</p> <p>Sit the player in a specific seat.</p>"},{"location":"objects/game/Player/#Unsit","title":"Unsit \u2192 <code>void</code>","text":"<p>Parameters: addForce [ <code>boolean</code> = <code>false</code> ]</p> <p>Unsit the player.</p>"},{"location":"objects/game/Player/#properties","title":"Properties","text":""},{"location":"objects/game/Player/#CanMove","title":"CanMove : <code>boolean</code> = <code>true</code>","text":"<p>Determines whether or not the player can move.</p>"},{"location":"objects/game/Player/#ChatColor","title":"ChatColor :            Color = <code>(255,255,255)</code>","text":"<p>The player's username color in the chat.</p> <pre><code>game[\"Players\"][\"willemsteller\"].ChatColor = Color3.New(0, 1, 0)\n</code></pre>"},{"location":"objects/game/Player/#HeadColor","title":"HeadColor :            Color","text":"<p>Specifies the color of the players's head.</p>"},{"location":"objects/game/Player/#Health","title":"Health : <code>number</code> = <code>100</code>","text":"<p>The current health of the player.</p>"},{"location":"objects/game/Player/#IsAdmin","title":"IsAdmin : <code>boolean</code>","text":"<p>Returns whether or not the player is a Polytoria admin.</p> <p>This property is read-only and cannot be modified.</p>"},{"location":"objects/game/Player/#IsCreator","title":"IsCreator : <code>boolean</code>","text":"<p>Returns whether or not the player is the creator of the current place.</p> <p>This property is read-only and cannot be modified.</p>"},{"location":"objects/game/Player/#IsInputFocused","title":"IsInputFocused : <code>boolean</code>","text":"<p>Determines whether or not the player is currently focused on an input.</p> <p>This property is read-only and cannot be modified.</p>"},{"location":"objects/game/Player/#JumpPower","title":"JumpPower : <code>number</code> = <code>36</code>","text":"<p>Specifies how high the player's jump is.</p>"},{"location":"objects/game/Player/#LeftArmColor","title":"LeftArmColor :            Color","text":"<p>Specifies the color of the players's left arm.</p>"},{"location":"objects/game/Player/#LeftLegColor","title":"LeftLegColor :            Color","text":"<p>Specifies the color of the players's left leg.</p>"},{"location":"objects/game/Player/#MaxHealth","title":"MaxHealth : <code>number</code> = <code>100</code>","text":"<p>Specifies the maximum health the player can have.</p>"},{"location":"objects/game/Player/#MaxStamina","title":"MaxStamina : <code>number</code> = <code>3</code>","text":"<p>Specifies the maximum stamina the player can have.</p>"},{"location":"objects/game/Player/#RespawnTime","title":"RespawnTime : <code>number</code> = <code>5</code>","text":"<p>Determines how long it takes between the player's death and respawn.</p>"},{"location":"objects/game/Player/#RightArmColor","title":"RightArmColor :            Color","text":"<p>Specifies the color of the players's right arm.</p>"},{"location":"objects/game/Player/#RightLegColor","title":"RightLegColor :            Color","text":"<p>Specifies the color of the players's right leg.</p>"},{"location":"objects/game/Player/#SittingIn","title":"SittingIn :       Seat","text":"<p>Returns the seat the player is currently sitting in, <code>nil</code> if the player is not sitting in any seat.</p>"},{"location":"objects/game/Player/#SprintSpeed","title":"SprintSpeed : <code>number</code> = <code>25</code>","text":"<p>Determines how fast the player is while sprinting.</p>"},{"location":"objects/game/Player/#Stamina","title":"Stamina : <code>number</code> = <code>0</code>","text":"<p>The player's current amount of stamina.</p>"},{"location":"objects/game/Player/#StaminaEnabled","title":"StaminaEnabled : <code>boolean</code> = <code>true</code>","text":"<p>Determines whether or not stamina is enabled for the player.</p>"},{"location":"objects/game/Player/#StaminaRegen","title":"StaminaRegen : <code>number</code> = <code>1.2</code>","text":"<p>The rate at which stamina regenerates after being depleted for the player.</p>"},{"location":"objects/game/Player/#TorsoColor","title":"TorsoColor :            Color","text":"<p>Specifies the color of the players's torso.</p>"},{"location":"objects/game/Player/#UserID","title":"UserID : <code>number</code>","text":"<p>Returns the player's user ID.</p> <p>This property is read-only and cannot be modified.</p>"},{"location":"objects/game/Player/#WalkSpeed","title":"WalkSpeed : <code>number</code> = <code>16</code>","text":"<p>Determines how fast the player walks.</p>"},{"location":"objects/game/PlayerDefaults/","title":"PlayerDefaults","text":"<p>  PlayerDefaults is a service used for storing the default values of the   Player when created.</p>"},{"location":"objects/game/PlayerDefaults/#methods","title":"Methods","text":""},{"location":"objects/game/PlayerDefaults/#LoadDefaults","title":"LoadDefaults \u2192 <code>void</code>","text":"<p>Parameters: player [   Player ]</p> <p>Resets the specified player back to their default values.</p>"},{"location":"objects/game/PlayerDefaults/#properties","title":"Properties","text":""},{"location":"objects/game/PlayerDefaults/#ChatColor","title":"ChatColor :            Color = <code>(255,255,255)</code>","text":"<p>Determines the default color of players' usernames in chat.</p>"},{"location":"objects/game/PlayerDefaults/#JumpPower","title":"JumpPower : <code>number</code> = <code>36</code>","text":"<p>Determines how high the player jumps by default.</p>"},{"location":"objects/game/PlayerDefaults/#MaxHealth","title":"MaxHealth : <code>number</code> = <code>100</code>","text":"<p>Determines the default maximum health of players.</p>"},{"location":"objects/game/PlayerDefaults/#MaxStamina","title":"MaxStamina : <code>number</code> = <code>3</code>","text":"<p>Determines the default maximum stamina of players.</p>"},{"location":"objects/game/PlayerDefaults/#RespawnTime","title":"RespawnTime : <code>number</code> = <code>5</code>","text":"<p>Determines the default of how long it takes between player's death and respawn.</p>"},{"location":"objects/game/PlayerDefaults/#SprintSpeed","title":"SprintSpeed : <code>number</code> = <code>25</code>","text":"<p>Determines the default sprint speed of players.</p>"},{"location":"objects/game/PlayerDefaults/#Stamina","title":"Stamina : <code>number</code> = <code>0</code>","text":"<p>Determines the default stamina of players.</p>"},{"location":"objects/game/PlayerDefaults/#StaminaEnabled","title":"StaminaEnabled : <code>boolean</code> = <code>true</code>","text":"<p>Determines whether or not stamina is enabled by default for players.</p>"},{"location":"objects/game/PlayerDefaults/#StaminaRegen","title":"StaminaRegen : <code>number</code> = <code>1.2</code>","text":"<p>Determines the default rate at which stamina regenerates after being depleted for players.</p>"},{"location":"objects/game/PlayerDefaults/#WalkSpeed","title":"WalkSpeed : <code>number</code> = <code>16</code>","text":"<p>Determines how fast the player walks by default.</p>"},{"location":"objects/game/Players/","title":"Players","text":"<p>Not to be confused with   Player, the object that represents a single player.</p> <p>  Players is the container class for all Player instances.</p>"},{"location":"objects/game/Players/#events","title":"Events","text":""},{"location":"objects/game/Players/#PlayerAdded","title":"PlayerAdded","text":"<p>Parameters: player [   Player ]</p> <p>Fires when a player joins the server.</p> <p>Example</p> <pre><code>game[\"Players\"].PlayerAdded:Connect(function(player)\n    if player.Name == \"baggy\" then\n        player:Kick(\"Baggy u stink!!!\")\n    end\nend)\n</code></pre>"},{"location":"objects/game/Players/#PlayerRemoved","title":"PlayerRemoved","text":"<p>Parameters: player [   Player ]</p> <p>Fires when a player leaves the server.</p> <p>Example</p> <pre><code>game[\"Players\"].PlayerRemoved:Connect(function(player)\n    if player.Name == \"baggy\" then\n        print(\"Baggy left thank god!!!!!\")\n    end\nend)\n</code></pre>"},{"location":"objects/game/Players/#methods","title":"Methods","text":""},{"location":"objects/game/Players/#GetPlayer","title":"GetPlayer \u2192      Player","text":"<p>Parameters: username [ <code>String</code> ]</p> <p>Returns the player instance from their username.</p>"},{"location":"objects/game/Players/#GetPlayerByID","title":"GetPlayerByID \u2192      Player","text":"<p>Parameters: userID [ <code>number</code> ]</p> <p>Returns the player instance from their user ID.</p>"},{"location":"objects/game/Players/#GetPlayers","title":"GetPlayers \u2192 <code>[]</code>","text":"<p>Returns all players in the place as a table.</p> <p>Example</p> <pre><code>for i, player in ipairs(game[\"Players\"]:GetPlayers()) do\n    print(player.Name ..\" is in the server!\")\nend\n</code></pre>"},{"location":"objects/game/Players/#properties","title":"Properties","text":""},{"location":"objects/game/Players/#LocalPlayer","title":"LocalPlayer :      Player","text":"<p>Returns the local player currently playing.</p> <p>This is only available to the client. It can only be accessed within local scripts.</p> <p>Example</p> <pre><code>print(game[\"Players\"].LocalPlayer.Name)\n</code></pre>"},{"location":"objects/game/Players/#PlayerCollisionEnabled","title":"PlayerCollisionEnabled : <code>boolean</code>","text":"<p>Determines whether or not collisions between players are enabled.</p> <p>Example</p> <pre><code>print(\"Turning off player collisions!\")\ngame[\"Players\"].PlayerCollisionEnabled = false\n</code></pre>"},{"location":"objects/game/ScriptService/","title":"ScriptService","text":"<p>  ScriptService is a service used for storing scripts and local scripts.</p>"},{"location":"objects/physics/","title":"Physics","text":"<ul> <li>  BodyPosition</li> </ul>"},{"location":"objects/physics/BodyPosition/","title":"BodyPosition","text":"<p>  BodyPosition are objects that apply a force to their parent until it moves toward the target position.</p>"},{"location":"objects/physics/BodyPosition/#properties","title":"Properties","text":""},{"location":"objects/physics/BodyPosition/#AcceptableDistance","title":"AcceptableDistance : <code>number</code>","text":"<p>Determines how close the body has to be to the target position to stop applying forces to it.</p> <p>Example</p> <pre><code>bodyPosition.AcceptanceDistance = 5\n</code></pre>"},{"location":"objects/physics/BodyPosition/#Force","title":"Force : <code>number</code>","text":"<p>Determines how much force the body applies.</p> <p>Example</p> <pre><code>bodyPosition.Force = 100\n</code></pre>"},{"location":"objects/physics/BodyPosition/#TargetPosition","title":"TargetPosition :       Vector3","text":"<p>Determines the target position that the body applies forces to get to.</p> <p>Example</p> <pre><code>bodyPosition.TargetPosition = Vector3.New(0, 50, 0)\n</code></pre>"},{"location":"objects/scripting/","title":"Scripting","text":"<ul> <li>  BaseScript</li> <li>  LocalScript</li> <li>  ModuleScript</li> <li>  NetworkEvent</li> <li>  ScriptInstance</li> </ul>"},{"location":"objects/scripting/BaseScript/","title":"BaseScript","text":"<p>Not to be confused with:</p> <ul> <li> <p>  ScriptInstance (which runs your Lua scripts on the server.)</p> </li> <li> <p>  LocalScript (which runs your Lua scripts on the client.)</p> </li> <li> <p>  ModuleScript (which contains data accessible by any script.)</p> </li> </ul> <p>  BaseScripts are the base classes of all scripts (ScriptInstances, LocalScripts). They can be parented to any instance.</p>"},{"location":"objects/scripting/BaseScript/#methods","title":"Methods","text":""},{"location":"objects/scripting/BaseScript/#Call","title":"Call \u2192 <code>void</code>","text":"<p>Parameters: <code>functionParameters</code></p> <p>Calls a function on another script</p> <p>Example</p> <pre><code>game[\"ScriptService\"][\"Script\"]:Call(\"Foo\", \"Bar\")\n</code></pre>"},{"location":"objects/scripting/LocalScript/","title":"LocalScript","text":"<p>  LocalScript is a script that runs locally for each player. It can only see what the player can see.</p> <p>Some classes and functions are only callable through a LocalScript. You may find a client-exclusive warning with them in the Documentation.</p>"},{"location":"objects/scripting/ModuleScript/","title":"ModuleScript","text":"<p>  ModuleScripts are specialized scripts to hold data that can be accessed by other scripts using the <code>require()</code> function.</p> <p>It is important to define and return a table in a ModuleScript. When the place starts, the server and the client will run the ModuleScript once and store the result for other scripts to retrieve with <code>require()</code>.</p> <p>Example</p> <p>ModuleScript named <code>Structures</code> located in <code>game[\"ScriptService\"]</code></p> <pre><code>local Structures = {\n    [\"Tower\"] = {\n        [\"Description\"] = \"This tower will obliterate any enemies on the way to the castle!\",\n        [\"Price\"] = 95,\n        [\"AttackDamage\"] = 5\n    }\n}\n\n-- Make sure to return the table to be able to access it in other scripts!\nreturn Structures\n</code></pre> <p>In a Script/LocalScript:</p> <pre><code>wait(0.1) -- The ModuleScript might only start running after this Script/LocalScript began running and thus this wait() is necessary\nlocal Structures = require(game[\"ScriptService\"][\"Structures\"])\n\nprint(Structures[\"Tower\"][\"Description\"]) -- Prints out \"This tower will obliterate any enemies on the way to the castle!\" like how it was defined in the ModuleScript above.\n</code></pre>"},{"location":"objects/scripting/NetworkEvent/","title":"NetworkEvent","text":"<p>  NetworkEvents are events that can be called to communicate between server and client.   NetMessage are the class used for sharing data between server and client when sending NetworkEvents.</p>"},{"location":"objects/scripting/NetworkEvent/#events","title":"Events","text":""},{"location":"objects/scripting/NetworkEvent/#InvokedClient","title":"InvokedClient","text":"Parameters <p>sender [ <code>nil</code> ]</p> <p>netmsg [   NetMessage ]</p> <p>Fires when the client receives a message from the server.</p> <p>Example</p> <pre><code>netEvent.InvokedClient:Connect(function (sender, message)\n    local value = message:GetString(\"key\")\nend)\n</code></pre> <p>This is only available to the client. It can only be accessed within local scripts.</p>"},{"location":"objects/scripting/NetworkEvent/#InvokedServer","title":"InvokedServer","text":"Parameters <p>sender [   Player ]</p> <p>netmsg [   NetMessage ]</p> <p>Fires when the server receives a message from the client.</p> <p>Example</p> <pre><code>netEvent.InvokedServer:Connect(function (sender, message)\n    local value = message:GetString(\"key\")\nend)\n</code></pre> <p>This is only available to the server. It can only be accessed within server scripts.</p>"},{"location":"objects/scripting/NetworkEvent/#methods","title":"Methods","text":""},{"location":"objects/scripting/NetworkEvent/#InvokeClient","title":"InvokeClient \u2192 <code>void</code>","text":"Parameters <p>message [   NetMessage ]</p> <p>player [   Player ]</p> <p>Sends a network event to a specific player from the server.</p> <p>Example</p> <pre><code>local message = NetMessage.New()\nmessage.AddString(\"key\", \"value\")\nnetEvent.InvokeClient(message, game[\"Players\"][\"willemsteller\"])\n</code></pre> <p>This is only available to the server. It can only be accessed within server scripts.</p>"},{"location":"objects/scripting/NetworkEvent/#InvokeClients","title":"InvokeClients \u2192 <code>void</code>","text":"<p>Parameters: message [   NetMessage ]</p> <p>Sends a network event to all players from the server.</p> <p>Example</p> <pre><code>local message = NetMessage.New()\nmessage.AddString(\"key\", \"value\")\nnetEvent.InvokeClients(message)\n</code></pre> <p>This is only available to the server. It can only be accessed within server scripts.</p>"},{"location":"objects/scripting/NetworkEvent/#InvokeServer","title":"InvokeServer \u2192 <code>void</code>","text":"<p>Parameters: message [   NetMessage ]</p> <p>Sends a network event to the server from the client.</p> <p>Example</p> <pre><code>-- netEvent defined somewhere else in the code\nlocal message = NetMessage.New()\nmessage.AddString(\"key\", \"value\")\nnetEvent.InvokeServer(message)\n</code></pre>"},{"location":"objects/scripting/ScriptInstance/","title":"ScriptInstance","text":"<p>  ScriptInstances run Lua code on the server. Any code that should be kept on the server (such as Datastores) should be kept in a ScriptInstance.</p> <p>Some classes and functions are only callable through a ScriptInstance. You may find a server-exclusive warning with them in the Documentation.</p>"},{"location":"objects/static-classes/","title":"Static classes","text":"<ul> <li>  Achievements</li> <li>  Camera</li> <li>  Chat</li> <li>  CoreUI</li> <li>  Datastore</li> <li>  Http</li> <li>  Input</li> <li>:polytoria-Json: Json</li> <li>  Tween</li> </ul>"},{"location":"objects/static-classes/Achievements/","title":"Achievements","text":"<p>This is only available to the server. It can only be accessed within server scripts.</p> <p>  Achievements is a static class, that is used to award place achievements to a player.</p>"},{"location":"objects/static-classes/Achievements/#methods","title":"Methods","text":""},{"location":"objects/static-classes/Achievements/#Award","title":"Award \u2192 <code>callback</code>","text":"Parameters <p>playerUserID [ <code>number</code> ]</p> <p>achievementID [ <code>number</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Awards the specified player the specified achievement.</p> <p>Example</p> <pre><code>game[\"Players\"].PlayerAdded:Connect(function(plr)\n    wait(2)\n    Achievements:Award(plr.UserID, 31472, function(success, error)\n        if success then\n            print(\"Awarded achievement\")\n        else\n            print(\"Error awarding achievement: \" .. error)\n        end\n    end)\nend)\n</code></pre> <p>The callback function has the parameters \"success\", indicating if the award succeded, and \"error\", which contains the error message if the award failed.</p>"},{"location":"objects/static-classes/Achievements/#HasAchievement","title":"HasAchievement \u2192 <code>callback</code>","text":"Parameters <p>playerUserID [ <code>number</code> ]</p> <p>achievementID [ <code>number</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Check if the specified player has the specified achievement.</p> <p>Example</p> <pre><code>game[\"Players\"].PlayerAdded:Connect(function(plr)\n    wait(2)\n    Achievements:HasAchievement(plr.UserID, 31472, function(hasAchievement, success, error)\n        if success then\n            if hasAchievement then\n                print(player.Name .. \"has the achievement!\")\n            else\n                print(player.Name .. \"doesn't have the achievement :(\")\n            end\n        else\n            print(\"Error checking for achievement obtainability: \" .. error)\n        end\n    end)\nend)\n</code></pre> <p>The callback function has the parameters \"hasAchievement\", if the player has the achievement, \"success\", if the lookup succeeded and \"error\", which contains the error message if the lookup failed.</p>"},{"location":"objects/static-classes/Camera/","title":"Camera","text":"<p>This is only available to the client. It can only be accessed within local scripts.</p> <p>  Camera is a class that represents the local player's camera.</p>"},{"location":"objects/static-classes/Camera/#properties","title":"Properties","text":""},{"location":"objects/static-classes/Camera/#Distance","title":"Distance : <code>number</code>","text":"<p>The distance between the camera and the player when the camera is in FollowPlayer mode.</p> <p>Example</p> <pre><code>Camera.Distance = 20\n</code></pre>"},{"location":"objects/static-classes/Camera/#FOV","title":"FOV : <code>number</code>","text":"<p>Sets or return the camera's field of view.</p> <p>Example</p> <pre><code>Camera.FOV = 90\n</code></pre>"},{"location":"objects/static-classes/Camera/#FastFlySpeed","title":"FastFlySpeed : <code>number</code>","text":"<p>The camera speed when the camera is in FreeCam mode while holding shift.</p> <p>Example</p> <pre><code>Camera.FastFlySpeed = 100\n</code></pre>"},{"location":"objects/static-classes/Camera/#FlySpeed","title":"FlySpeed : <code>number</code>","text":"<p>The camera speed when the camera is in FreeCam mode.</p> <p>Example</p> <pre><code>Camera.FlySpeed = 10\n</code></pre>"},{"location":"objects/static-classes/Camera/#FollowLerp","title":"FollowLerp : <code>boolean</code>","text":"<p>Determines whether or not to use lerping in FollowPlayer mode.</p> <p>Example</p> <pre><code>Camera.FollowLerp = true\n</code></pre>"},{"location":"objects/static-classes/Camera/#FreeLookSensitivity","title":"FreeLookSensitivity : <code>number</code>","text":"<p>The mouse sensitivity while in FreeCam mode.</p> <p>Example</p> <pre><code>Camera.FreeLookSensitivity = 3\n</code></pre>"},{"location":"objects/static-classes/Camera/#HorizontalSpeed","title":"HorizontalSpeed : <code>number</code>","text":"<p>The horizontal movement speed of the camera in FollowPlayer mode.</p> <p>Example</p> <pre><code>Camera.HorizontalSpeed = 120\n</code></pre>"},{"location":"objects/static-classes/Camera/#IsFirstPerson","title":"IsFirstPerson : <code>boolean</code>","text":"<p>Returns whether or not the camera is in first person.</p> <p>Example</p> <pre><code>print(Camera.IsFirstPerson)\n</code></pre> <p>This property is read-only and cannot be modified.</p>"},{"location":"objects/static-classes/Camera/#LerpSpeed","title":"LerpSpeed : <code>number</code>","text":"<p>The lerp speed of the camera when lerping is enabled.</p> <p>Example</p> <pre><code>Camera.LerpSpeed = 15\n</code></pre>"},{"location":"objects/static-classes/Camera/#MaxDistance","title":"MaxDistance : <code>number</code>","text":"<p>The camera's maximum distance from the player in FollowPlayer mode.</p> <p>Example</p> <pre><code>Camera.MaxDistance = 0\n</code></pre>"},{"location":"objects/static-classes/Camera/#MinDistance","title":"MinDistance : <code>number</code>","text":"<p>The camera's minimum distance from the player in FollowPlayer mode.</p> <p>Example</p> <pre><code>Camera.MinDistance = 5\n</code></pre>"},{"location":"objects/static-classes/Camera/#Mode","title":"Mode :       CameraMode","text":"<p>Sets or returns the camera's current mode.</p> <p>Example</p> <pre><code>Camera.Mode = CameraMode.Scripted\n</code></pre>"},{"location":"objects/static-classes/Camera/#Orthographic","title":"Orthographic : <code>boolean</code>","text":"<p>Determines whether or not the camera should render in orthographic (2D) mode or not (3D).</p> <p>Example</p> <pre><code>Camera.Orthographic = true\n</code></pre>"},{"location":"objects/static-classes/Camera/#OrthographicSize","title":"OrthographicSize : <code>number</code>","text":"<p>Determines the half-size of the camera when in orthographic mode.</p> <p>Example</p> <pre><code>Camera.OrthographicSize = 30\n</code></pre>"},{"location":"objects/static-classes/Camera/#Position","title":"Position :       Vector3","text":"<p>The position of the camera in the world.</p> <p>Example</p> <pre><code>Camera.Position = Vector3.New(0, 100, 0)\n</code></pre>"},{"location":"objects/static-classes/Camera/#Rotation","title":"Rotation :       Vector3","text":"<p>The rotation of the camera.</p> <p>Example</p> <pre><code>Camera.Rotation = Vector3.New(90, 0, 0)\n</code></pre>"},{"location":"objects/static-classes/Camera/#ScrollSensitivity","title":"ScrollSensitivity : <code>number</code>","text":"<p>Determines the scroll move speed of the camera.</p> <p>Example</p> <pre><code>Camera.ScrollSensitivity = 15\n</code></pre>"},{"location":"objects/static-classes/Camera/#VerticalSpeed","title":"VerticalSpeed : <code>number</code>","text":"<p>Determines the vertical move speed of the camera.</p> <p>Example</p> <pre><code>Camera.VerticalSpeed = 120\n</code></pre>"},{"location":"objects/static-classes/Chat/","title":"Chat","text":"<p>  Chat is a static class used for various actions regarding the chat.</p>"},{"location":"objects/static-classes/Chat/#methods","title":"Methods","text":""},{"location":"objects/static-classes/Chat/#BroadcastMessage","title":"BroadcastMessage \u2192 <code>void</code>","text":"<p>Parameters: message [ <code>string</code> ]</p> <p>Sends a chat message to all users.</p> <p>Example</p> <pre><code>Chat:BroadcastMessage(\"Hello, world!\")\n</code></pre>"},{"location":"objects/static-classes/Chat/#UnicastMessage","title":"UnicastMessage \u2192 <code>void</code>","text":"Parameters <p>message [ <code>string</code> ]</p> <p>player [   Player ]</p> <p>Sends a chat message to a specific user.</p> <p>Example</p> <pre><code>Chat:UnicastMessage(\"Hello, world!\", game[\"Players\"][\"willemsteller\"])\n</code></pre>"},{"location":"objects/static-classes/CoreUI/","title":"CoreUI","text":"<p>NEEDS AN ICON CoreUI is a static class that allows for the toggling of certain core GUI.</p> <p>This is only available to the client. It can only be accessed within local scripts.</p>"},{"location":"objects/static-classes/CoreUI/#properties","title":"Properties","text":""},{"location":"objects/static-classes/CoreUI/#ChatEnabled","title":"ChatEnabled : <code>boolean</code> = <code>true</code>","text":"<p>Determines whether or not the chat box is visible.</p>"},{"location":"objects/static-classes/CoreUI/#MenuButtonEnabled","title":"MenuButtonEnabled : <code>boolean</code> = <code>true</code>","text":"<p>Determines whether or not the menu button is visible.</p>"},{"location":"objects/static-classes/CoreUI/#UserCardEnabled","title":"UserCardEnabled : <code>boolean</code> = <code>true</code>","text":"<p>Determines whether or not the user card (in the upper right hand corner above the leaderboard) is visible.</p>"},{"location":"objects/static-classes/CoreUI/#LeaderboardEnabled","title":"LeaderboardEnabled : <code>boolean</code> = <code>true</code>","text":"<p>Determines whether or not the player list/leaderboard is visible.</p>"},{"location":"objects/static-classes/CoreUI/#HealthBarEnabled","title":"HealthBarEnabled : <code>boolean</code> = <code>true</code>","text":"<p>Determines whether or not the player's health bar is visible.</p>"},{"location":"objects/static-classes/CoreUI/#HotbarEnabled","title":"HotbarEnabled : <code>boolean</code> = <code>true</code>","text":"<p>Determines whether or not the hot bar is visible.</p>"},{"location":"objects/static-classes/Datastore/","title":"Datastore","text":"<p>  Datastore (not to be confused with the Datastore data type) is a service used for storing data between place sessions.</p> <p>This is only available to the server. It can only be accessed within server scripts.</p>"},{"location":"objects/static-classes/Datastore/#limits","title":"Limits","text":"TL;DR Limits <p>Rate Limit: up to <code>(30 + (10 * [amount of players]))</code> requests per minute (for example; a server with 5 players would have a limit of 80 requests/min)</p> <p>Datastore Size: up to 65,535 bytes</p> <p>Key Length: up to 32 characters</p> <p>There is a limit placed on the Datastore functions per server instance. Requests that exceed this limit will be canceled and return an error. Read and write functions both have their own rate limit of <code>(30 + (10 * [amount of players]))</code> requests per minute. This limit is reset every minute.</p> <p>You can create as many datastores as you want, however each datastore is limited to 65,535 bytes and it's key cannot be longer than 32 characters. Creating a datastore will also count towards the rate limit.</p>"},{"location":"objects/static-classes/Datastore/#events","title":"Events","text":""},{"location":"objects/static-classes/Datastore/#Loaded","title":"Loaded","text":"<p>Fires when the Datastore object loads.</p> <p>Example</p> <pre><code>local ds = Datastore:GetDatastore(\"Player_\" .. player.UserID)\nds.Loaded:Connect(function ()\n    ds:Set(\"Coins\", 100)\nend)\n</code></pre>"},{"location":"objects/static-classes/Datastore/#methods","title":"Methods","text":""},{"location":"objects/static-classes/Datastore/#GetDatastore","title":"GetDatastore \u2192          Datastore","text":"<p>Parameters: datastoreName [ <code>string</code> ]</p> <p>Attempts to get a Datastore object from the Datastore service.</p> <p>Example</p> <pre><code>local ds = Datastore:GetDatastore(\"Player_\" .. player.UserID)\n</code></pre> <p>Wait till Loaded</p> <p>Make sure to wait until the Datastore object is loaded by waiting until the <code>.Loaded</code> event on the Datastore object is fired.</p>"},{"location":"objects/static-classes/Datastore/#Get","title":"Get \u2192 <code>callback</code>","text":"Parameters <p>key [ <code>string</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Attempts to get the value of a key from a Datastore.</p> <p>Example</p> <pre><code>-- Attempts to get the value of \"Coins\"\nds:Get(\"Coins\", function(value, success, error)\n    if not success then\n        print(error)\n    else\n        print(player.Name .. \" has \" .. value .. \" coins.\")\n    end\nend)\n</code></pre>"},{"location":"objects/static-classes/Datastore/#Remove","title":"Remove \u2192 <code>callback</code>","text":"Parameters <p>key [ <code>string</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Attempts to remove a key from a Datastore.</p> <p>Example</p> <pre><code>-- Attempts to remove the key \"Coins\"\nds:Remove(\"Coins\", function(success, error)\n    if not success then\n        print(error)\n    else\n        print(player.Name .. \"'s coins have been removed!\")\n    end\nend)\n</code></pre>"},{"location":"objects/static-classes/Datastore/#Set","title":"Set \u2192 <code>callback</code>","text":"Parameters <p>key [ <code>string</code> ]</p> <p>value [ <code>any</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Attempts to set the value of a key in a Datastore</p> <p>Example</p> <pre><code>-- Attempts to set the value of \"Coins\" to 100\nds:Set(\"Coins\", 100, function(success, error)\n    if not success then\n        print(error)\n    else\n        print(player.Name .. \"'s coins have been set to 100!\")\n    end\nend)\n</code></pre>"},{"location":"objects/static-classes/Datastore/#properties","title":"Properties","text":""},{"location":"objects/static-classes/Datastore/#Loading","title":"Loading : <code>boolean</code>","text":"<p>Returns true or false depending on if the Datastore object is loaded.</p> <p>Example</p> <pre><code>local ds = Datastore:GetDatastore(\"Player_\" .. player.UserID)\nwhile ds.Loading do\n    wait()\nend\n</code></pre> <p>This property is read-only and cannot be modified.</p>"},{"location":"objects/static-classes/Http/","title":"Http","text":"<p>  Http is a static class used for HTTP communications and requests.</p> <p>This is only available to the server. It can only be accessed within server scripts.</p> <p>The place ID is sent along with the request under the header named <code>PT-Game-ID</code>.</p> <p>When using Http <code>:Post</code>, <code>:Put</code>, or <code>:Delete</code> parameters are formatted in query form like this: <code>key1=value&amp;key2=value</code></p>"},{"location":"objects/static-classes/Http/#methods","title":"Methods","text":""},{"location":"objects/static-classes/Http/#Get","title":"Get \u2192 <code>void</code>","text":"Parameters <p>url [ <code>string</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Sends a GET request to the specified URL.</p> <p>Example</p> <pre><code>Http:Get(\"https://api.polytoria.com/v1/store/25272\", function (data, error, errmsg)\n    if not error then\n        script.Parent.Color = Color.New(1, 1, 1)\n        script.Parent.Text = data\n    else\n        script.Parent.Color = Color.New(1, 0, 0)\n        script.Parent.Text = errmsg\n    end\nend,{})\n</code></pre>"},{"location":"objects/static-classes/Http/#Post","title":"Post \u2192 <code>void</code>","text":"Parameters <p>url [ <code>string</code> ]</p> <p>parameters [ <code>string</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Sends a POST request to the specified URL.</p> <p>Example</p> <pre><code>Http:Post(\"https://example.com/api/post\", \"id=1&amp;name=Hello\" , function (data, error, errmsg)\n    if not error then\n        script.Parent.Color = Color.New(1, 1, 1)\n        script.Parent.Text = data\n    else\n        script.Parent.Color = Color.New(1, 0, 0)\n        script.Parent.Text = errmsg\n    end\nend)\n</code></pre>"},{"location":"objects/static-classes/Http/#Put","title":"Put \u2192 <code>void</code>","text":"Parameters <p>url [ <code>string</code> ]</p> <p>parameters [ <code>string</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Sends a PUT request to the specified URL.</p> <p>Example</p> <pre><code>Http:Put(\"https://example.com\", \"id=1&amp;content=Hello\" , function (data, error, errmsg)\n    if not error then\n        script.Parent.Color = Color.New(1, 1, 1)\n        script.Parent.Text = data\n    else\n        script.Parent.Color = Color.New(1, 0, 0)\n        script.Parent.Text = errmsg\n    end\nend)\n</code></pre>"},{"location":"objects/static-classes/Http/#Delete","title":"Delete \u2192 <code>void</code>","text":"Parameters <p>url [ <code>string</code> ]</p> <p>parameters [ <code>string</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Sends a DELETE request to the specified url.</p> <p>Example</p> <pre><code>Http:Delete(\"https://example.com/api/delete\", \"id=1\" , function (data, error, errmsg)\n    if not error then\n        script.Parent.Color = Color.New(1, 1, 1)\n        script.Parent.Text = data\n    else\n        script.Parent.Color = Color.New(1, 0, 0)\n        script.Parent.Text = errmsg\n    end\nend)\n</code></pre>"},{"location":"objects/static-classes/Input/","title":"Input","text":"<p>  Input is a class used for retrieving user input data, such as the mouse and keyboard.</p>"},{"location":"objects/static-classes/Input/#events","title":"Events","text":""},{"location":"objects/static-classes/Input/#KeyDown","title":"KeyDown","text":"<p>Parameters: key [ <code>string</code> ]</p> <p>Fires when a key is pressed.</p> <p>Example</p> <pre><code>Input.KeyDown:Connect(function (key)\n    print(key .. \" was pressed!\")\n\n    if key == \"P\" then\n        print(\"The 'P' key was pressed!\")\n    end\nend)\n</code></pre>"},{"location":"objects/static-classes/Input/#KeyUp","title":"KeyUp","text":"<p>Parameters: key [ <code>string</code> ]</p> <p>Fires when a key is released.</p> <pre><code>Input.KeyUp:Connect(function (key)\n    print(key .. \" was pressed!\")\n\n    if key == \"P\" then\n        print(\"The 'P' key was pressed!\")\n    end\nend)\n</code></pre>"},{"location":"objects/static-classes/Input/#methods","title":"Methods","text":""},{"location":"objects/static-classes/Input/#ScreenToViewportPoint","title":"ScreenToViewportPoint \u2192       Vector3","text":"<p>Parameters: screenPosition [   Vector3 ]</p> <p>Transforms <code>screenPosition</code> parameter from screen space into viewport space.</p>"},{"location":"objects/static-classes/Input/#ScreenToWorldPoint","title":"ScreenToWorldPoint \u2192       Vector3","text":"<p>Parameters: screenPosition [   Vector3 ]</p> <p>Transforms <code>screenPosition</code> from screen space into world space.</p>"},{"location":"objects/static-classes/Input/#ViewportToScreenPoint","title":"ViewportToScreenPoint \u2192       Vector3","text":"<p>Parameters: viewportPosition [   Vector3 ]</p> <p>Transforms <code>viewportPosition</code> from viewport space into screen space.</p>"},{"location":"objects/static-classes/Input/#ViewportToWorldPoint","title":"ViewportToWorldPoint \u2192       Vector3","text":"<p>Parameters: viewportPosition [   Vector3 ]</p> <p>Transforms <code>viewportPosition</code> from viewport space into world space.</p>"},{"location":"objects/static-classes/Input/#WorldToScreenPoint","title":"WorldToScreenPoint \u2192       Vector3","text":"<p>Parameters: worldPosition [   Vector3 ]</p> <p>Transforms <code>worldPosition</code> from world space into screen space.</p>"},{"location":"objects/static-classes/Input/#WorldToViewportPoint","title":"WorldToViewportPoint \u2192       Vector3","text":"<p>Parameters: worldPosition [   Vector3 ]</p> <p>Transforms <code>worldPosition</code> from world space into viewport space.</p>"},{"location":"objects/static-classes/Input/#properties","title":"Properties","text":""},{"location":"objects/static-classes/Input/#MousePosition","title":"MousePosition :      Vector2","text":"<p>Returns the current mouse position.</p>"},{"location":"objects/static-classes/Input/#CursorLocked","title":"CursorLocked : <code>boolean</code>","text":"<p>to-do</p> <p>Example</p> <pre><code>Input.CursorLocked = true\n</code></pre>"},{"location":"objects/static-classes/Input/#CursorVisible","title":"CursorVisible : <code>boolean</code>","text":"<p>to do</p> <p>Example</p> <pre><code>Input.CursorVisible = true\n</code></pre>"},{"location":"objects/static-classes/Json/","title":"json","text":"<p>  json is a module which allows for scripts to interface with JSON data representation by converting it to a table and vice versa.</p>"},{"location":"objects/static-classes/Json/#methods","title":"Methods","text":""},{"location":"objects/static-classes/Json/#isNull","title":"isNull \u2192 <code>boolean</code>","text":"<p>Parameters: jsonString [ <code>string</code> ]</p> <p>Returns true if the value specified is a null read from a json string</p> <p>Example</p> <pre><code>print(json.isNull(\"{}\"))\n</code></pre>"},{"location":"objects/static-classes/Json/#null","title":"null \u2192 <code>string</code>","text":"<p>Returns a special value which is a representation of a null in a json</p> <p>Example</p> <pre><code>print(json.null())\n</code></pre>"},{"location":"objects/static-classes/Json/#parse","title":"parse \u2192 <code>Table</code>","text":"<p>Parameters: jsonString [ <code>string</code> ]</p> <p>Returns a table with the contents of the specified JSON string</p> <p>Example</p> <pre><code>Http:Get(\"https://api.polytoria.com/v1/asset/owner?userID=1&amp;assetID=234\", function (data, error, errmsg)\n    if error then\n        print(\"Something went wrong!\")\n        return\n    end\n\n    print(json.parse(data)[\"Success\"])\nend)\n</code></pre>"},{"location":"objects/static-classes/Json/#serialize","title":"serialize \u2192 <code>string</code>","text":"<p>Parameters: array [ <code>array</code> ]</p> <p>Returns a json string with the contents of the specified table.</p> <p>Example</p> <pre><code>print(json.serialize({\n    Name = \"Cool Sword\",\n    Damage = 10,\n}))\n</code></pre>"},{"location":"objects/static-classes/Tween/","title":"Tween","text":"<p>  Tween is a static class used for tweening properties of instances, such as Position, Rotation and Size.</p>"},{"location":"objects/static-classes/Tween/#methods","title":"Methods","text":""},{"location":"objects/static-classes/Tween/#TweenColor","title":"TweenColor \u2192 <code>void</code>","text":"Parameters <p>startValue [   Color ]</p> <p>endValue [   Color ]</p> <p>time [ <code>number</code> ]</p> <p>callPerStep [ <code>function</code> ]</p> <p>type [ <code>TweenType</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Tweens a color between two specified values.</p> <p>Example</p> <pre><code>Tween:TweenColor(Color.New(1,1,1,1), Color.New(1,1,1,0), 5, function(val)\n    part.Color = val\nend, TweenType.linear, function()\n    print(\"Tween finished\")\nend\n</code></pre>"},{"location":"objects/static-classes/Tween/#TweenNumber","title":"TweenNumber \u2192 <code>void</code>","text":"Parameters <p>startValue [ <code>number</code> ]</p> <p>endValue [ <code>number</code> ]</p> <p>time [ <code>number</code> ]</p> <p>callPerStep [ <code>function</code> ]</p> <p>type [ <code>TweenType</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Tweens a number between two specified values.</p> <p>Example</p> <pre><code>Tween:TweenNumber(1, 10, 1, function(val)\n    print(val)\nend, TweenType.linear, function()\n    print(\"Tween finished\")\nend)\n</code></pre>"},{"location":"objects/static-classes/Tween/#TweenPosition","title":"TweenPosition \u2192 <code>void</code>","text":"Parameters <p>target [   DynamicInstance ]</p> <p>destination [   Vector3 ]</p> <p>time [ <code>number</code> ]</p> <p>type [ <code>TweenType</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Tweens the position of a DynamicInstance</p> <p>Example</p> <pre><code>Tween:TweenPosition(part, Vector3.New(100, 0, 0), 100, TweenType.linear, function()\n    print(\"I have arrived!\")\nend)\n</code></pre>"},{"location":"objects/static-classes/Tween/#TweenRotation","title":"TweenRotation \u2192 <code>void</code>","text":"Parameters <p>target [   DynamicInstance ]</p> <p>destination [   Vector3 ]</p> <p>time [ <code>number</code> ]</p> <p>type [ <code>TweenType</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Tweens the rotation of a DynamicInstance</p> <p>Example</p> <pre><code>Tween:TweenRotation(part, Vector3.New(0, 90, 0), 1, TweenType.linear, function()\n    print(\"Rotating finished\")\nend)\n</code></pre>"},{"location":"objects/static-classes/Tween/#TweenSize","title":"TweenSize \u2192 <code>void</code>","text":"Parameters <p>target [   DynamicInstance ]</p> <p>endValue [   Vector3 ]</p> <p>time [ <code>number</code> ]</p> <p>type [ <code>TweenType</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Tweens the size of a DynamicInstance</p> <p>Example</p> <pre><code>Tween:TweenSize(part, Vector3.New(5, 5, 5), 1, TweenType.linear, function()\n    print(\"Sizing finished\")\nend)\n</code></pre>"},{"location":"objects/static-classes/Tween/#TweenVector2","title":"TweenVector2 \u2192 <code>void</code>","text":"Parameters <p>startValue [   Vector2 ]</p> <p>endValue [   Vector2 ]</p> <p>time [ <code>number</code> ]</p> <p>callPerStep [ <code>function</code> ]</p> <p>type [ <code>TweenType</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Tweens a vector2 between two specified values.</p> <p>Example</p> <pre><code>Tween:TweenVector2(Vector2.New(0,0), Vector2.New(0,50), 5, function(val)\n    UIView.PositionOffset = val\nend, TweenType.linear, function()\n    print(\"Tween finished\")\nend)\n</code></pre>"},{"location":"objects/static-classes/Tween/#TweenVector3","title":"TweenVector3 \u2192 <code>void</code>","text":"Parameters <p>startValue [   Vector3 ]</p> <p>endValue [   Vector3 ]</p> <p>time [ <code>number</code> ]</p> <p>callPerStep [ <code>function</code> ]</p> <p>type [ <code>TweenType</code> ]</p> <p>callback [ <code>function</code> ]</p> <p>Tweens a vector3 between two specified values.</p> <p>Example</p> <pre><code>Tween:TweenVector3(Vector3.New(0,0,0), Vector3.New(0,50,0), 5, function(val)\n    part.Position = val\nend, TweenType.linear, function()\n    print(\"Tween finished\")\nend)\n</code></pre>"},{"location":"objects/system/","title":"System","text":"<ul> <li>  DynamicInstance</li> <li>  Instance</li> </ul>"},{"location":"objects/system/DynamicInstance/","title":"DynamicInstance","text":"<p>  DynamicInstance is the base class where all objects with a position, rotation and scale derive from.</p>"},{"location":"objects/system/DynamicInstance/#methods","title":"Methods","text":""},{"location":"objects/system/DynamicInstance/#LookAt","title":"LookAt \u2192 <code>void</code>","text":"<p>Parameters: rotation [   Vector3 ]</p> <p>Rotates the DynamicInstance so that the forward vector looks at the target.</p> <p>Example</p> <pre><code>part.LookAt(Vector3.New(12, 34, 56))\n</code></pre>"},{"location":"objects/system/DynamicInstance/#Translate","title":"Translate \u2192 <code>void</code>","text":"<p>Parameters: translation [   Vector3 ]</p> <p>Moves the transform in the direction and distance of translation.</p> <p>Example</p> <pre><code>part.Translate(part.Forward * 5)\n</code></pre>"},{"location":"objects/system/DynamicInstance/#properties","title":"Properties","text":""},{"location":"objects/system/DynamicInstance/#Forward","title":"Forward :       Vector3","text":"<p>The forward vector of this DynamicInstance</p>"},{"location":"objects/system/DynamicInstance/#LocalPosition","title":"LocalPosition :       Vector3 = <code>Vector3.New(0, 10, 0)</code>","text":"<p>Specifies the position relative to the parent of an instance.</p>"},{"location":"objects/system/DynamicInstance/#LocalRotation","title":"LocalRotation :       Vector3 = <code>Vector3.New(0, 45, 0)</code>","text":"<p>Specifies the rotation relative to the parent of an instance.</p>"},{"location":"objects/system/DynamicInstance/#LocalSize","title":"LocalSize :       Vector3 = <code>Vector3.New(1, 1, 1)</code>","text":"<p>The size of the instance relative to its parent.</p>"},{"location":"objects/system/DynamicInstance/#Position","title":"Position :       Vector3 = <code>Vector3.New(0, 10, 0)</code>","text":"<p>Specifies the position of an instance.</p>"},{"location":"objects/system/DynamicInstance/#Right","title":"Right :       Vector3","text":"<p>The right vector of this DynamicInstance</p> <p>Example</p> <pre><code>part.Translate(part.Right * 5)\n</code></pre>"},{"location":"objects/system/DynamicInstance/#Rotation","title":"Rotation :       Vector3 = <code>Vector3.New(0, 45, 0)</code>","text":"<p>Specifies the rotation of an instance.</p>"},{"location":"objects/system/DynamicInstance/#Size","title":"Size :       Vector3 = <code>Vector3.New(5, 10, 4)</code>","text":"<p>Specifies the size of an instance.</p>"},{"location":"objects/system/DynamicInstance/#Up","title":"Up :       Vector3","text":"<p>The Y axis of this DynamicInstance</p>"},{"location":"objects/system/Instance/","title":"Instance","text":"<p>  Instance is the base class of all classes. Every class derives from it and has all properties, events and functions Instance has.</p>"},{"location":"objects/system/Instance/#events","title":"Events","text":""},{"location":"objects/system/Instance/#ChildAdded","title":"ChildAdded","text":"<p>Parameters: child [   Instance ]</p> <p>Fires when a child instance is added.</p> <p>Example</p> <pre><code>game[\"Environment\"].ChildAdded:Connect(function (child)\n    print(child.Name .. \" was added\")\nend)\n</code></pre>"},{"location":"objects/system/Instance/#ChildRemoved","title":"ChildRemoved","text":"<p>Parameters: child [   Instance ]</p> <p>Fires when a child instance is removed.</p> <p>Example</p> <pre><code>game[\"Environment\"].ChildRemoved:Connect(function (child)\n    print(child.Name .. \" was removed\")\nend)\n</code></pre>"},{"location":"objects/system/Instance/#Clicked","title":"Clicked","text":"<p>Parameters: player [   Player ]</p> <p>Fires when the instance is clicked by a player.</p> <p>Example</p> <pre><code>game[\"Environment\"][\"Part\"].Clicked:Connect(function (player)\n    print(player.Name .. \" clicked on this part!\")\nend)\n</code></pre>"},{"location":"objects/system/Instance/#MouseEnter","title":"MouseEnter","text":"<p>Fires when the mouse enters the instance.</p> <p>Example</p> <pre><code>part.MouseEnter:Connect(function()\n    part.Color = Color.New(1, 0, 0)\nend)\n</code></pre>"},{"location":"objects/system/Instance/#MouseExit","title":"MouseExit","text":"<p>Fires when the mouse enters the instance.</p> <p>Example</p> <pre><code>part.MouseExit:Connect(function()\n    part.Color = Color.New(0, 1, 0)\nend)\n</code></pre>"},{"location":"objects/system/Instance/#Touched","title":"Touched","text":"<p>Parameters: otherPart [   Instance ]</p> <p>Fires when the instance was touched by another instance.</p> <p>Example</p> <pre><code>game[\"Environment\"][\"Part\"].Touched:Connect(function (otherPart)\n    print(otherPart.Name .. \" touched this part!\")\nend)\n</code></pre>"},{"location":"objects/system/Instance/#TouchEnded","title":"TouchEnded","text":"<p>Parameters: otherPart [   Instance ]</p> <p>Fires when the instance is no longer being touched by another instance.</p> <p>Example</p> <pre><code>game[\"Environment\"][\"Part\"].TouchEnded:Connect(function (otherPart)\n    print(otherPart.Name .. \" stopped touching this part!\")\nend)\n</code></pre>"},{"location":"objects/system/Instance/#methods","title":"Methods","text":""},{"location":"objects/system/Instance/#New","title":"New \u2192     Instance","text":"<p>Parameters: <code>typeOfInstance</code></p> <p>Create a new instance.</p>"},{"location":"objects/system/Instance/#Clone","title":"Clone \u2192 <code>void</code>","text":"<p>Clones the instance</p>"},{"location":"objects/system/Instance/#Destroy","title":"Destroy \u2192 <code>void</code>","text":"<p>Destroys the instance (same as Delete method)</p>"},{"location":"objects/system/Instance/#Delete","title":"Delete \u2192 <code>void</code>","text":"<p>Deletes the instance (same as Destroy method)</p>"},{"location":"objects/system/Instance/#GetParent","title":"GetParent \u2192     Instance","text":"<p>Returns the parent of the instance (same as accessing the <code>.Parent</code> property).</p>"},{"location":"objects/system/Instance/#SetParent","title":"SetParent \u2192 <code>void</code>","text":"<p>Parameters: newParent [   Instance ]</p> <p>Sets the parent of the instance (same as setting the <code>.Parent</code> property)</p>"},{"location":"objects/system/Instance/#IsA","title":"IsA \u2192 <code>boolean</code>","text":"<p>Parameters: className [ <code>string</code> ]</p> <p>Returns whether or not the instance is the specified class.</p>"},{"location":"objects/system/Instance/#IsDescendantOf","title":"IsDescendantOf \u2192 <code>boolean</code>","text":"<p>Parameters: other [   Instance ]</p> <p>Returns whether or not the instance is a descendant (child, child of child, etc) of the specified instance.</p>"},{"location":"objects/system/Instance/#FindChild","title":"FindChild \u2192     Instance","text":"<p>Parameters: name [ <code>string</code> ]</p> <p>Attempts to find the first child instance with the specified name (<code>nil</code> if not found).</p>"},{"location":"objects/system/Instance/#FindChildByClass","title":"FindChildByClass \u2192     Instance","text":"<p>Parameters: className [ <code>string</code> ]</p> <p>Attempts to find the first child instance with the specified class (<code>nil</code> if not found).</p>"},{"location":"objects/system/Instance/#GetChildren","title":"GetChildren \u2192 <code>Instance[]</code>","text":"<p>Returns an array of all the children instances parented to the instance.</p>"},{"location":"objects/system/Instance/#GetChildrenOfClass","title":"GetChildrenOfClass \u2192 <code>Instance[]</code>","text":"<p>Parameters: className [ <code>string</code> ]</p> <p>Returns an array of all the children instances with the specified class.</p>"},{"location":"objects/system/Instance/#properties","title":"Properties","text":""},{"location":"objects/system/Instance/#CanReparent","title":"CanReparent : <code>boolean</code>","text":"<p>Returns whether this instance can be reparented/deleted or not.</p>"},{"location":"objects/system/Instance/#ClassName","title":"ClassName : <code>string</code>","text":"<p>Returns the name of the class.</p>"},{"location":"objects/system/Instance/#Item","title":"Item :     Instance","text":"<p>Specifies the name of an instance.</p>"},{"location":"objects/system/Instance/#Name","title":"Name : <code>string</code>","text":"<p>Specifies the name of an instance.</p>"},{"location":"objects/system/Instance/#Parent","title":"Parent :     Instance","text":"<p>Specifies the parent instance of an instance.</p>"},{"location":"objects/system/Instance/#Shared","title":"Shared : <code>[]</code>","text":"<p>An empty table you can use to hold metadata about anything on any object or player you want.</p> <p>Example</p> <pre><code>-- Script 1\nlocal players = game.Players.GetChildren()\nlocal lucky = players[math.random(1, #players)]\n\nlucky.Shared.IsZombie = true\n</code></pre> <pre><code>-- Script 2\nlocal killBrick = game.Environment[\"Kill Brick\"]\n\nkillBrick.Touched:Connect(function(hit)\n    if hit.IsA(\"Player\") then\n        if hit.Shared.IsZombie then\n            print(\"YOU CAN'T KILL ME, I'M ALREADY DEAD!\")\n        else\n            hit.Health = 0\n        end\n    end\nend\n</code></pre>"},{"location":"objects/types/","title":"Types","text":"<ul> <li>  Color</li> <li>  NetMessage</li> <li>  RayResult</li> <li>  Vector2</li> <li>  Vector3</li> </ul>"},{"location":"objects/types/Color/","title":"Color","text":"<p>  Color is a data type that represents a color.</p>"},{"location":"objects/types/Color/#notes","title":"Notes","text":"<p>The alpha property is between 0 and 255. 0 is fully transparent and 255 is fully visible.</p>"},{"location":"objects/types/Color/#constructors","title":"Constructors","text":"Name Description Color.New() Creates a new black color. Color.New(<code>number</code> n) Creates a new Color with an R, G and B value of n. Color.New(<code>number</code> r, <code>number</code> g, <code>number</code> b) Creates a new Color with the set R, G and B values and an alpha value of 1 Color.New(<code>number</code> r, <code>number</code> g, <code>number</code> b, <code>number</code> a) Creates a new Color with the set R, G, B and A values Color.FromHex(<code>string</code> HEX) Creates a new Color from the specified hex value. Color.Random() Returns a random color with an alpha value of 1."},{"location":"objects/types/Color/#properties","title":"Properties","text":"Name Description <code>number</code> r Red color component <code>number</code> g Green color component <code>number</code> b Blue color component <code>number</code> a Alpha (opacity) color component"},{"location":"objects/types/Color/#functions","title":"Functions","text":"Name Description Color.Lerp(<code>Color</code> a, <code>Color</code>, b, <code>number</code> t) Linearly interpolates colors a and b by t."},{"location":"objects/types/NetMessage/","title":"NetMessage","text":"<p>  NetMessage is a data type used for transporting data between client and server when using   NetworkEvent.</p>"},{"location":"objects/types/NetMessage/#constructors","title":"Constructors","text":"Name Description NetMessage.New() Creates a new NetMessage. NetMessage.AddString(<code>string</code> key, <code>string</code> value) Sets a key as a string. NetMessage.GetString(<code>string</code> key) Gets the value of a string key. NetMessage.AddInt(<code>string</code> key, <code>int</code> int) Sets a key as an integer. NetMessage.GetInt(<code>string</code> key) Gets the value of a integer key. NetMessage.AddNumber(<code>string</code> key, <code>number</code> number) Sets a key as a number. NetMessage.GetNumber(<code>string</code> key) Gets the value of a number key. NetMessage.AddBool(<code>string</code> key, <code>boolean</code> bool) Sets a key as a boolean. NetMessage.GetBool(<code>string</code> key) Gets the value of a boolean key. NetMessage.AddVector2(<code>string</code> key, <code>Vector2</code> Vector2) Sets a key as a Vector2. NetMessage.GetVector2(<code>string</code> key) Gets the value of a Vector2 key. NetMessage.AddVector3(<code>string</code> key, <code>Vector3</code> Vector3) Sets a key as a Vector3. NetMessage.GetVector3(<code>string</code> key) Gets the value of a Vector3 key. NetMessage.AddColor(<code>string</code> key, <code>Color</code> Color) Sets a key as a Color. NetMessage.GetColor(<code>string</code> key) Gets the value of a Color key. NetMessage.AddInstance(<code>string</code> key, <code>Instance</code> Instance) Sets a key as an Instance. NetMessage.GetInstance(<code>string</code> key) CGets the value of an Instance key."},{"location":"objects/types/RayResult/","title":"RayResult","text":"<p>  RayResult is a data type that contains data about a raycast result.</p>"},{"location":"objects/types/RayResult/#constructors","title":"Constructors","text":"Name Description <code>Instance</code> Instance The instance hit by the raycast. <code>Vector3</code> Position The position the ray made contact at. <code>number</code> Distance The distance between the hit and origin. <code>Vector3</code> Normal The normal of the surface the ray hit."},{"location":"objects/types/Vector2/","title":"Vector2","text":"<p>  Vector2 is a 2D vector with an x and y component, commonly used with UI.</p>"},{"location":"objects/types/Vector2/#constructors","title":"Constructors","text":"Name Description Vector2.New() Creates a new Vector. Vector2.New(<code>number</code> n) Creates a new Vector2 with an X and Y value of n. Vector2.New(<code>number</code> x, <code>number</code> y) Creates a new Vector2 with the specified values."},{"location":"objects/types/Vector2/#properties","title":"Properties","text":"Name Description <code>number</code> x The X component of the vector <code>number</code> y The Y component of the vector <code>number</code> magnitude The length of this vector <code>number</code> sqrMagnitude The squared length of this vector <code>number</code> normalized Returns this vector with a magnitude of 1"},{"location":"objects/types/Vector2/#methods","title":"Methods","text":"Name Description <code>Vector2</code> Vector2.Lerp(<code>Vector2</code> a, <code>Vector2</code> b, <code>number</code> t) Linearly interpolates between two points."},{"location":"objects/types/Vector3/","title":"Vector3","text":"<p>  Vector3 is a 3D vector with an x, y and z component.</p>"},{"location":"objects/types/Vector3/#constructors","title":"Constructors","text":"Name Description Vector3.New() Creates a new Vector. Vector3.New(<code>number</code> n) Creates a new Vector3 with an X, Y and Z value of n. Vector3.New(<code>number</code> x, <code>number</code> y) Creates a new Vector3 with X and Y set to the specified values and a Z of 0. Vector3.New(<code>number</code> x, <code>number</code> y, <code>number</code> z) Creates a new Vector3 with the specified values."},{"location":"objects/types/Vector3/#properties","title":"Properties","text":"Name Description <code>number</code> x The X component of the vector <code>number</code> y The Y component of the vector <code>number</code> z The Z component of the vector <code>number</code> magnitude The length of this vector <code>number</code> sqrMagnitude The squared length of this vector <code>number</code> normalized Returns this vector with a magnitude of 1"},{"location":"objects/types/Vector3/#methods","title":"Methods","text":"Name Description Vector3.Angle(<code>Vector3</code> from, <code>Vector3</code> to) Returns the angle in degrees between from and to. Vector3.ClampMagnitude(<code>Vector3</code> vector, <code>number</code> maxLength) Returns a copy of this vector with its magnitude clamped to maxLength Vector3.Cross(<code>Vector3</code> a, <code>Vector3</code> b) Cross product of two vectors. Vector3.Distance(<code>Vector3</code> a, <code>Vector3</code> b) Returns the distance between a and b Vector3.Dot(<code>Vector3</code> a, <code>Vector3</code> b) Dot product of two vectors Vector3.Lerp(<code>Vector3</code> a, <code>Vector3</code> b, <code>number</code> t) Linearly interpolates between two points. Vector3.Max(<code>Vector3</code> a, <code>Vector3</code> b) Returns a vector that is made from the largest components of two vectors. Vector3.Min(<code>Vector3</code> a, <code>Vector3</code> b) Returns a vector that is made from the smallest components of two vectors. Vector3.MoveTowards(<code>Vector3</code> current, <code>Vector3</code> target, <code>number</code> maxDistanceDelta) Calculate a position between the points specified by current and target, moving no farther than the distance specified by maxDistanceDelta. Vector3.Normalize(<code>Vector3</code> value) Makes this vector have a magnitude of 1. Vector3.Project(<code>Vector3</code> vector, <code>Vector3</code> onNormal) Projects a vector onto another vector. Vector3.ProjectOnPlane(<code>Vector3</code> vector, <code>Vector3</code> planeNormal) Projects a vector onto a plane defined by a normal orthogonal to the plane. Vector3.Reflect(<code>Vector3</code> inDirection, <code>Vector3</code> inNormal) Reflects a vector off the plane defined by a normal. Vector3.RotateTowards(<code>Vector3</code> current, <code>Vector3</code> target, <code>number</code> maxRadiansDelta, <code>number</code> maxMagnitudeDelta) Rotates a vector current towards target. Vector3.Scale(<code>Vector3</code> a, <code>Vector3</code> b) Multiplies two vectors component-wise. Vector3.SignedAngle(<code>Vector3</code> from, <code>Vector3</code> to, <code>Vector3</code> axis) Returns the signed angle in degrees between from and to. Vector3.Slerp(<code>Vector3</code> a, <code>Vector3</code> b) Spherically interpolates between two vectors. Vector3.SlerpUnclamped(<code>Vector3</code> a, <code>Vector3</code> b) Spherically interpolates between two vectors. Vector3.SmoothDamp(<code>Vector3</code> current, <code>Vector3</code> target, <code>Vector3</code> currentVelocity, <code>number</code> smoothTime, <code>number</code> maxSpeed, <code>number</code> deltaTime) Gradually changes a vector towards a desired goal over time."},{"location":"objects/ui/","title":"UI","text":"<ul> <li>  GUI</li> <li>  PlayerGUI</li> <li>  UIButton</li> <li>  UIField</li> <li>  UIHVLayout</li> <li>  UIHorizontalLayout</li> <li>  UIImage</li> <li>  UILabel</li> <li>  UITextInput</li> <li>  UIVerticalLayout</li> <li>  UIView</li> </ul>"},{"location":"objects/ui/GUI/","title":"GUI","text":"<p>  GUI is a class that is used to create a GUI.</p>"},{"location":"objects/ui/GUI/#properties","title":"Properties","text":""},{"location":"objects/ui/GUI/#Visible","title":"Visible : <code>boolean</code>","text":"<p>Determines whether the GUI is visible or not.</p> <p>Example</p> <pre><code>gui.Visible = true\n</code></pre>"},{"location":"objects/ui/PlayerGUI/","title":"PlayerGUI","text":"<p>  PlayerGUI is a class that contains all custom GUIs.</p>"},{"location":"objects/ui/PlayerGUI/#properties","title":"Properties","text":""},{"location":"objects/ui/PlayerGUI/#Interactable","title":"Interactable : <code>boolean</code>","text":"<p>Whether or not the player can interact with the GUI.</p>"},{"location":"objects/ui/PlayerGUI/#Opacity","title":"Opacity : <code>number</code>","text":"<p>The opacity of the player's GUI.</p>"},{"location":"objects/ui/UIButton/","title":"UIButton","text":"<p>  UIButton is a class used for having interactable buttons in your place's UI.</p>"},{"location":"objects/ui/UIButton/#events","title":"Events","text":""},{"location":"objects/ui/UIButton/#Clicked","title":"Clicked","text":"<p>Fires when the UIButton is clicked</p> <p>Example</p> <pre><code>script.Parent.Clicked:Connect(function ()\n    print(\"The button was clicked!\")\nend)\n</code></pre>"},{"location":"objects/ui/UIField/","title":"UIField","text":"<p>  UIField is the base class of all UI classes.</p>"},{"location":"objects/ui/UIField/#events","title":"Events","text":""},{"location":"objects/ui/UIField/#MouseDown","title":"MouseDown","text":"<p>Fires when the mouse is clicked</p> <p>Example</p> <pre><code>label.MouseDown:Connect(function()\n    label.Text = \"Mouse Down\"\nend)\n</code></pre>"},{"location":"objects/ui/UIField/#MouseUp","title":"MouseUp","text":"<p>Fires when the mouse is released</p> <p>Example</p> <pre><code>label.MouseUp:Connect(function()\n    label.Text = \"Mouse Up\"\nend)\n</code></pre>"},{"location":"objects/ui/UIField/#properties","title":"Properties","text":""},{"location":"objects/ui/UIField/#PivotPoint","title":"PivotPoint :      Vector2 = <code>Vector2.New(0.5, 0.5)</code>","text":"<p>The pivot point of the UI element.</p>"},{"location":"objects/ui/UIField/#PositionOffset","title":"PositionOffset :      Vector2 = <code>Vector2.New(100, 100)</code>","text":"<p>The offset of the UI element in pixels.</p>"},{"location":"objects/ui/UIField/#PositionRelative","title":"PositionRelative :      Vector2 = <code>Vector2.New(0.5, 0.5)</code>","text":"<p>The position of the UI element relative to its parent.</p>"},{"location":"objects/ui/UIField/#Rotation","title":"Rotation : <code>number</code>","text":"<p>The rotation of the UI element.</p>"},{"location":"objects/ui/UIField/#SizeOffset","title":"SizeOffset :      Vector2 = <code>Vector2.New(100, 100)</code>","text":"<p>The size of the UI element in pixels.</p>"},{"location":"objects/ui/UIField/#SizeRelative","title":"SizeRelative :      Vector2 = <code>Vector2.New(1, 1)</code>","text":"<p>The size of the UI element relative to its parent.</p>"},{"location":"objects/ui/UIField/#Visible","title":"Visible : <code>boolean</code>","text":"<p>Determines whether the UI element is visible or not.</p>"},{"location":"objects/ui/UIHVLayout/","title":"UIHVLayout","text":"<p>  UIHVLayout is the base class of all UI layout elements.</p>"},{"location":"objects/ui/UIHVLayout/#properties","title":"Properties","text":""},{"location":"objects/ui/UIHVLayout/#ChildAlignment","title":"ChildAlignment : <code>TextAnchor</code>","text":"<p>Specifies the alignment of the child.</p>"},{"location":"objects/ui/UIHVLayout/#ChildControlHeight","title":"ChildControlHeight : <code>boolean</code>","text":"<p>Specifies the height of the child control.</p>"},{"location":"objects/ui/UIHVLayout/#ChildControlWidth","title":"ChildControlWidth : <code>boolean</code>","text":"<p>Specifies the width of the child control.</p>"},{"location":"objects/ui/UIHVLayout/#ChildForceExpandHeight","title":"ChildForceExpandHeight : <code>boolean</code>","text":"<p>Specifies whether the should expand to the height of the parent.</p>"},{"location":"objects/ui/UIHVLayout/#ChildForceExpandWidth","title":"ChildForceExpandWidth : <code>boolean</code>","text":"<p>Specifies whether the child should expand to fill the width of the parent.</p>"},{"location":"objects/ui/UIHVLayout/#ChildScaleHeight","title":"ChildScaleHeight : <code>boolean</code>","text":"<p>Specifies the height of the child.</p>"},{"location":"objects/ui/UIHVLayout/#ChildScaleWidth","title":"ChildScaleWidth : <code>boolean</code>","text":"<p>Specifies the width of the child.</p>"},{"location":"objects/ui/UIHVLayout/#PaddingBottom","title":"PaddingBottom : <code>number</code>","text":"<p>Specifies the bottom padding of the UIHVLayout.</p>"},{"location":"objects/ui/UIHVLayout/#PaddingLeft","title":"PaddingLeft : <code>number</code>","text":"<p>Specifies the left padding of a UIHVLayout.</p>"},{"location":"objects/ui/UIHVLayout/#PaddingRight","title":"PaddingRight : <code>number</code>","text":"<p>Specifies the right padding of the UIHVLayout.</p>"},{"location":"objects/ui/UIHVLayout/#PaddingTop","title":"PaddingTop : <code>number</code>","text":"<p>Specifies the top padding of the UIHVLayout.</p>"},{"location":"objects/ui/UIHVLayout/#ReverseAlignment","title":"ReverseAlignment : <code>boolean</code>","text":"<p>Specifies if the alignment is reversed.</p>"},{"location":"objects/ui/UIHVLayout/#Spacing","title":"Spacing : <code>number</code>","text":"<p>Specifies the spacing between child.</p>"},{"location":"objects/ui/UIHorizontalLayout/","title":"UIHorizontalLayout","text":"<p>  UIHorizontalLayout is a class that aligns all of it's children horizontally.</p>"},{"location":"objects/ui/UIImage/","title":"UIImage","text":"<p>  UIImage is a class for displaying images in your place's UI.</p>"},{"location":"objects/ui/UIImage/#properties","title":"Properties","text":""},{"location":"objects/ui/UIImage/#Color","title":"Color :            Color","text":"<p>Specifies the color of the image.</p> <p>Example</p> <pre><code>image.Color = Color.New(1, 0, 0)\n</code></pre>"},{"location":"objects/ui/UIImage/#ImageID","title":"ImageID : <code>number</code>","text":"<p>Specifies the image ID of the UIImage.</p> <p>Example</p> <pre><code>image.ImageID = 12274\n</code></pre>"},{"location":"objects/ui/UIImage/#ImageType","title":"ImageType :       ImageType","text":"<p>TO-DO</p>"},{"location":"objects/ui/UIImage/#Loading","title":"Loading : <code>boolean</code>","text":"<p>Returns whether or not the image is loading.</p> <p>Example</p> <pre><code>while image.Loading do\n    wait(0)\nend\nprint(\"Image loaded\")\n</code></pre>"},{"location":"objects/ui/UIImage/#Visible","title":"Visible : <code>boolean</code>","text":"<p>Specifies if the image is visible.</p> <p>Example</p> <pre><code>image.Visible = false\n</code></pre>"},{"location":"objects/ui/UILabel/","title":"UILabel","text":"<p>  UILabel is a label that can be used to display text.</p>"},{"location":"objects/ui/UILabel/#properties","title":"Properties","text":""},{"location":"objects/ui/UILabel/#AutoSize","title":"AutoSize : <code>boolean</code>","text":"<p>Whether the text should be automatically sized to fit the label's size.</p>"},{"location":"objects/ui/UILabel/#Font","title":"Font :       TextFontPreset","text":"<p>The font of the label.</p>"},{"location":"objects/ui/UILabel/#FontSize","title":"FontSize : <code>number</code>","text":"<p>The font size of the label.</p>"},{"location":"objects/ui/UILabel/#JustifyText","title":"JustifyText :       TextJustify","text":"<p>Determines how the text is justified.</p>"},{"location":"objects/ui/UILabel/#MaxFontSize","title":"MaxFontSize : <code>number</code>","text":"<p>The maximum font size of the UI element if AutoSize is set to true.</p>"},{"location":"objects/ui/UILabel/#Text","title":"Text : <code>string</code>","text":"<p>The text of the label.</p>"},{"location":"objects/ui/UILabel/#TextColor","title":"TextColor :            Color","text":"<p>The color of the text.</p>"},{"location":"objects/ui/UILabel/#VerticalAlign","title":"VerticalAlign :       TextVerticalAlign","text":"<p>The vertical alignment of the text.</p>"},{"location":"objects/ui/UITextInput/","title":"UITextInput","text":"<p>  UITextInput is a class that allows the user to enter text.</p>"},{"location":"objects/ui/UITextInput/#events","title":"Events","text":""},{"location":"objects/ui/UITextInput/#Changed","title":"Changed","text":"<p>An event that is fired when the value of the text input changes.</p> <p>Example</p> <pre><code>element.Changed:Connect(function()\n    print(element.Text)\nend)\n</code></pre>"},{"location":"objects/ui/UITextInput/#Submitted","title":"Submitted","text":"<p>The event that is triggered when the user submits the text in a text input.</p> <p>Example</p> <pre><code>element.Submitted:Connect(function()\n    print(element.Text)\nend)\n</code></pre>"},{"location":"objects/ui/UITextInput/#properties","title":"Properties","text":""},{"location":"objects/ui/UITextInput/#AutoSize","title":"AutoSize : <code>boolean</code>","text":"<p>Whether the text should be automatically sized to fit the label's size.</p> <p>Example</p> <pre><code>element.AutoSize = true\n</code></pre>"},{"location":"objects/ui/UITextInput/#Font","title":"Font :       TextFontPreset","text":"<p>The font of the label.</p> <p>Example</p> <pre><code>element.Font = TextFontPreset.Montserrat\n</code></pre>"},{"location":"objects/ui/UITextInput/#FontSize","title":"FontSize : <code>number</code>","text":"<p>The font size of the label.</p> <p>Example</p> <pre><code>element.FontSize = 20\n</code></pre>"},{"location":"objects/ui/UITextInput/#IsMultiline","title":"IsMultiline : <code>boolean</code>","text":"<p>Set if the text input can be multiline.</p> <p>Example</p> <pre><code>element.IsMultiline = true\n</code></pre>"},{"location":"objects/ui/UITextInput/#IsReadOnly","title":"IsReadOnly : <code>boolean</code>","text":"<p>Set if the text input can be edited or not.</p> <p>Example</p> <pre><code>element.IsReadOnly = true\n</code></pre>"},{"location":"objects/ui/UITextInput/#JustifyText","title":"JustifyText :       TextJustify","text":"<p>Determines how the text is justified.</p> <p>Example</p> <pre><code>element.JustifyText = TextJustify.Center\n</code></pre>"},{"location":"objects/ui/UITextInput/#MaxFontSize","title":"MaxFontSize : <code>number</code>","text":"<p>The maximum font size of the UI element if AutoSize is set to true.</p> <p>Example</p> <pre><code>element.MaxFontSize = 16\n</code></pre>"},{"location":"objects/ui/UITextInput/#Placeholder","title":"Placeholder : <code>string</code>","text":"<p>The placeholder of the text input.</p> <p>Example</p> <pre><code>element.Placeholder = \"Type here...\"\n</code></pre>"},{"location":"objects/ui/UITextInput/#PlaceholderColor","title":"PlaceholderColor :            Color","text":"<p>The color of the placeholder text.</p> <p>Example</p> <pre><code>element.PlaceholderColor = Color.New(0, 0, 0, 0.5)\n</code></pre>"},{"location":"objects/ui/UITextInput/#Text","title":"Text : <code>string</code>","text":"<p>The text of the label.</p> <p>Example</p> <pre><code>element.Text = \"Hello, World!\"\n</code></pre>"},{"location":"objects/ui/UITextInput/#TextColor","title":"TextColor :            Color","text":"<p>The color of the text.</p> <p>Example</p> <pre><code>element.TextColor = Color.New(0, 0, 0, 1)\n</code></pre>"},{"location":"objects/ui/UITextInput/#VerticalAlign","title":"VerticalAlign :       TextVerticalAlign","text":"<p>The vertical alignment of the text.</p> <p>Example</p> <pre><code>element.VerticalAlign = TextVerticalAlign.Middle\n</code></pre>"},{"location":"objects/ui/UIVerticalLayout/","title":"UIVerticalLayout","text":"<p>  UIVerticalLayout is a class that aligns all of its children vertically.</p>"},{"location":"objects/ui/UIView/","title":"UIView","text":"<p>  UIView is a class that displays a rectangle in your place's UI.</p>"},{"location":"objects/ui/UIView/#properties","title":"Properties","text":""},{"location":"objects/ui/UIView/#BorderColor","title":"BorderColor :            Color","text":"<p>Determines the border color of the UI.</p> <p>Example</p> <pre><code>element.BorderColor = Color.New(1, 0, 0, 1)\n</code></pre>"},{"location":"objects/ui/UIView/#BorderWidth","title":"BorderWidth : <code>number</code>","text":"<p>Determines the border width of the UI.</p> <p>Example</p> <pre><code>element.BorderWidth = 10\n</code></pre>"},{"location":"objects/ui/UIView/#Color","title":"Color :            Color","text":"<p>Determines the color of the UI.</p> <p>Example</p> <pre><code>element.Color = Color.New(0, 0, 0, 1)\n</code></pre>"},{"location":"objects/ui/UIView/#CornerRadius","title":"CornerRadius : <code>number</code>","text":"<p>Determines the corner radius of the UI.</p> <p>Example</p> <pre><code>element.CornerRadius = 10\n</code></pre>"},{"location":"objects/values/","title":"Values","text":"<ul> <li>  BoolValue</li> <li>  ColorValue</li> <li>  InstanceValue</li> <li>  IntValue</li> <li>  NumberValue</li> <li>  StringValue</li> <li>  ValueBase</li> <li>  Vector3Value</li> </ul>"},{"location":"objects/values/BoolValue/","title":"BoolValue","text":"<p>  BoolValue is a ValueBase that stores a boolean.</p>"},{"location":"objects/values/BoolValue/#properties","title":"Properties","text":""},{"location":"objects/values/BoolValue/#Value","title":"Value : <code>boolean</code>","text":"<p>The value of this object.</p> <p>Example</p> <pre><code>boolValue.Value = true\n</code></pre>"},{"location":"objects/values/ColorValue/","title":"ColorValue","text":"<p>  ColorValue is a ValueBase that stores color.</p>"},{"location":"objects/values/ColorValue/#properties","title":"Properties","text":""},{"location":"objects/values/ColorValue/#Value","title":"Value :            Color","text":"<p>The value of this object.</p> <p>Example</p> <pre><code>colorValue.Value = Color.New(1, 1, 1, 1)\n</code></pre>"},{"location":"objects/values/InstanceValue/","title":"InstanceValue","text":"<p>  InstanceValue is a ValueBase that stores an instance.</p>"},{"location":"objects/values/InstanceValue/#properties","title":"Properties","text":""},{"location":"objects/values/InstanceValue/#Value","title":"Value :     Instance","text":"<p>The value of this object.</p> <p>Example</p> <pre><code>instanceValue.Value = game[\"Environment\"][\"Part\"]\n</code></pre>"},{"location":"objects/values/IntValue/","title":"IntValue","text":"<p>  IntValue is a ValueBase that stores integers.</p>"},{"location":"objects/values/IntValue/#properties","title":"Properties","text":""},{"location":"objects/values/IntValue/#Value","title":"Value : <code>number</code>","text":"<p>The value of this object.</p> <p>Example</p> <pre><code>intValue.Value = 10\n</code></pre>"},{"location":"objects/values/NumberValue/","title":"NumberValue","text":"<p>  NumberValue is a ValueBase that stores numbers.</p>"},{"location":"objects/values/NumberValue/#properties","title":"Properties","text":""},{"location":"objects/values/NumberValue/#Value","title":"Value : <code>number</code>","text":"<p>The value of this object.</p> <p>Example</p> <pre><code>numberValue.Value = 1.5\n</code></pre>"},{"location":"objects/values/StringValue/","title":"StringValue","text":"<p>  StringValue is a ValueBase that stores strings.</p>"},{"location":"objects/values/StringValue/#properties","title":"Properties","text":""},{"location":"objects/values/StringValue/#Value","title":"Value : <code>string</code>","text":"<p>The value of this object.</p> <p>Example</p> <pre><code>stringValue.Value = \"Hello, world!\"\n</code></pre>"},{"location":"objects/values/ValueBase/","title":"ValueBase","text":"<p>Not to be confused with:</p> <ul> <li> <p>  BoolValue (used for storing bool values.)</p> </li> <li> <p>  ColorValue (used for storing color values.)</p> </li> <li> <p>  InstanceValue (used for storing instances.)</p> </li> <li> <p>  IntValue (used for storing integer values.)</p> </li> <li> <p>  NumberValue (used for storing number values.)</p> </li> <li> <p>  StringValue (used for storing string values.)</p> </li> <li> <p>? (used for storing Vector2 values.)</p> </li> <li> <p>  Vector3Value (used for storing Vector3 values.)</p> </li> </ul> <p>Base class of all value classes.</p>"},{"location":"objects/values/ValueBase/#events","title":"Events","text":""},{"location":"objects/values/ValueBase/#Changed","title":"Changed","text":"<p>Fires when the value of the ValueBase changes.</p> <p>Example</p> <pre><code>boolValue.Changed:Connect(function()\n    print(\"My new value is \" .. boolValue.Value)\nend)\n</code></pre>"},{"location":"objects/values/Vector3Value/","title":"Vector3Value","text":"<p>  Vector3Value is a ValueBase that stores Vector3.</p>"},{"location":"objects/values/Vector3Value/#properties","title":"Properties","text":""},{"location":"objects/values/Vector3Value/#Value","title":"Value :       Vector3 = <code>(5, 123, 10)</code>","text":"<p>The value of this object.</p> <p>Example</p> <pre><code>vecValue.Value = Vector3.New(5, 123, 10)\n</code></pre>"},{"location":"objects/world/","title":"World","text":"<ul> <li>  BasePart</li> <li>  Climbable</li> <li>  Folder</li> <li>  MeshPart</li> <li>  Model</li> <li>  NPC</li> <li>  Part</li> <li>  Seat</li> <li>  Text3D</li> <li>  Tool</li> <li>  Truss</li> </ul>"},{"location":"objects/world/BasePart/","title":"BasePart","text":""},{"location":"objects/world/Climbable/","title":"Climbable","text":""},{"location":"objects/world/Climbable/#properties","title":"Properties","text":""},{"location":"objects/world/Climbable/#ClimbSpeed","title":"ClimbSpeed : <code>number</code>","text":"<p>Determines how fast a player can climb the object.</p>"},{"location":"objects/world/Folder/","title":"Folder","text":"<p>  Folder is similar to a model, used for storing objects in the place.</p>"},{"location":"objects/world/MeshPart/","title":"MeshPart","text":"<p>  MeshPart is a part that can have custom mesh applied to it, the mesh may be from the Polytoria Store (Hats, Tools and Heads) or user-uploaded meshes.</p>"},{"location":"objects/world/MeshPart/#methods","title":"Methods","text":""},{"location":"objects/world/MeshPart/#MovePosition","title":"MovePosition \u2192 <code>void</code>","text":"<p>Parameters: position [   Vector3 ]</p> <p>Moves the MeshPart to the specified position.</p>"},{"location":"objects/world/MeshPart/#MoveRotation","title":"MoveRotation \u2192 <code>void</code>","text":"<p>Parameters: rotation [   Vector3 ]</p> <p>Rotates the MeshPart to the specified rotation.</p>"},{"location":"objects/world/MeshPart/#properties","title":"Properties","text":""},{"location":"objects/world/MeshPart/#Anchored","title":"Anchored : <code>boolean</code>","text":"<p>Specifies whether the part is to be affected by physics or not.</p>"},{"location":"objects/world/MeshPart/#AngularVelocity","title":"AngularVelocity :       Vector3 = <code>Vector3.New(0, 0, 0)</code>","text":"<p>Specifies the angular velocity of a part.</p>"},{"location":"objects/world/MeshPart/#AssetID","title":"AssetID : <code>number</code>","text":"<p>The asset ID of the mesh part.</p>"},{"location":"objects/world/MeshPart/#CanCollide","title":"CanCollide : <code>boolean</code>","text":"<p>Specifies whether the part can be collided with or not.</p>"},{"location":"objects/world/MeshPart/#Loading","title":"Loading : <code>boolean</code>","text":"<p>True if the mesh is loading.</p>"},{"location":"objects/world/MeshPart/#Mass","title":"Mass : <code>number</code>","text":"<p>Specifies the mass of a part in kilograms.</p>"},{"location":"objects/world/MeshPart/#Material","title":"Material :       PartMaterial","text":"<p>Specifies the material of the part.</p>"},{"location":"objects/world/MeshPart/#Shape","title":"Shape :       PartShape","text":"<p>Specifies the shape of a part.</p>"},{"location":"objects/world/MeshPart/#Velocity","title":"Velocity :       Vector3 = <code>Vector3.New(0, 100, 0)</code>","text":"<p>Specifies the velocity of a part.</p>"},{"location":"objects/world/Model/","title":"Model","text":"<p>  Model is an instance that can hold other instances, and which transform affects its children.</p>"},{"location":"objects/world/NPC/","title":"NPC","text":"<p>  NPC (non-player character) is an object similar to a   Player but that can be controlled by code. Like players, it can walk and jump, and its body part colors can be customized.</p>"},{"location":"objects/world/NPC/#events","title":"Events","text":""},{"location":"objects/world/NPC/#Died","title":"Died","text":"<p>Fires when the NPC dies.</p> <p>Example</p> <pre><code>game[\"Environment\"][\"NPC\"].Died:Connect(function ()\n    print(\"NPC died!\")\nend)\n</code></pre>"},{"location":"objects/world/NPC/#methods","title":"Methods","text":""},{"location":"objects/world/NPC/#LoadAppearance","title":"LoadAppearance \u2192 <code>void</code>","text":"<p>Parameters: userID [ <code>number</code> ]</p> <p>Loads the specified user ID's avatar on the NPC.</p> <p>Example</p> <pre><code>-- Loads the appearance of willemsteller\nnpc:LoadAppearance(2)\n</code></pre>"},{"location":"objects/world/NPC/#ClearAppearance","title":"ClearAppearance \u2192 <code>void</code>","text":"<p>Clears the NPC's appearance.</p> <p>Example</p> <pre><code>-- Clears the appearance of the NPC\nnpc:ClearAppearance()\n</code></pre>"},{"location":"objects/world/NPC/#properties","title":"Properties","text":""},{"location":"objects/world/NPC/#Anchored","title":"Anchored : <code>boolean</code>","text":"<p>Determines whether the NPC is affected by physics or not.</p>"},{"location":"objects/world/NPC/#FaceID","title":"FaceID : <code>number</code>","text":"<p>The face ID of the NPC's face.</p>"},{"location":"objects/world/NPC/#Grounded","title":"Grounded : <code>boolean</code>","text":"<p>Returns true if the NPC is currently standing on the ground.</p>"},{"location":"objects/world/NPC/#HeadColor","title":"HeadColor :            Color","text":"<p>Specifies the color of the NPC's head.</p>"},{"location":"objects/world/NPC/#Health","title":"Health : <code>number</code>","text":"<p>Specifies the current amount of health the NPC has.</p>"},{"location":"objects/world/NPC/#MoveTarget","title":"MoveTarget :     Instance","text":"<p>Determines the instance the NPC should walk towards.</p>"},{"location":"objects/world/NPC/#WalkSpeed","title":"WalkSpeed : <code>number</code>","text":"<p>Determines the walkspeed of the NPC.</p>"},{"location":"objects/world/NPC/#MaxHealth","title":"MaxHealth : <code>number</code> = <code>100</code>","text":"<p>Specifies the maximum amount of health a NPC can have.</p>"},{"location":"objects/world/NPC/#ShirtID","title":"ShirtID : <code>number</code>","text":"<p>Specifies the shirt ID of the NPC's shirt.</p>"},{"location":"objects/world/NPC/#PantsID","title":"PantsID : <code>number</code>","text":"<p>The pants ID of the NPC's pants.</p>"},{"location":"objects/world/NPC/#TorsoColor","title":"TorsoColor :            Color","text":"<p>Specifies the color of the NPC's torso.</p>"},{"location":"objects/world/NPC/#LeftArmColor","title":"LeftArmColor :            Color","text":"<p>Specifies the color of the NPC's left arm.</p>"},{"location":"objects/world/NPC/#RightArmColor","title":"RightArmColor :            Color","text":"<p>Specifies the color of the NPC's right arm.</p>"},{"location":"objects/world/NPC/#LeftLegColor","title":"LeftLegColor :            Color","text":"<p>Specifies the color of the NPC's left leg.</p>"},{"location":"objects/world/NPC/#RightLegColor","title":"RightLegColor :            Color","text":"<p>Specifies the color of the NPC's right leg.</p>"},{"location":"objects/world/Part/","title":"Part","text":"<p>  Parts are physical objects that can be placed in the world.</p>"},{"location":"objects/world/Part/#methods","title":"Methods","text":""},{"location":"objects/world/Part/#MovePosition","title":"MovePosition \u2192 <code>void</code>","text":"<p>Parameters: position [   Vector3 ]</p> <p>Moves the part to the specified position while keeping physics in mind.</p> <p>Example</p> <pre><code>game[\"Environment\"][\"Part\"]:MovePosition(Vector3.New(50, 0, 0))\n</code></pre>"},{"location":"objects/world/Part/#MoveRotation","title":"MoveRotation \u2192 <code>void</code>","text":"<p>Parameters: rotation [   Vector3 ]</p> <p>Rotates the part while keeping physics in mind.</p> <p>Example</p> <pre><code>game[\"Environment\"][\"Part\"]:MovePosition(Vector3.New(0, 180, 0))\n</code></pre>"},{"location":"objects/world/Part/#properties","title":"Properties","text":""},{"location":"objects/world/Part/#Anchored","title":"Anchored : <code>boolean</code>","text":"<p>Specifies whether the part is to be affected by physics or not.</p>"},{"location":"objects/world/Part/#AngularDrag","title":"AngularDrag : <code>number</code>","text":"<p>Angular drag (air resistance) of this part.</p>"},{"location":"objects/world/Part/#AngularDrag","title":"AngularDrag : <code>number</code>","text":"<p>Angular drag (air resistance) of this part.</p>"},{"location":"objects/world/Part/#AngularVelocity","title":"AngularVelocity :       Vector3","text":"<p>Specifies the angular velocity of a part.</p>"},{"location":"objects/world/Part/#CanCollide","title":"CanCollide : <code>boolean</code>","text":"<p>Specifies whether the part can be collided with or not.</p>"},{"location":"objects/world/Part/#Color","title":"Color :            Color","text":"<p>Specifies the color of a part.</p>"},{"location":"objects/world/Part/#Drag","title":"Drag : <code>number</code>","text":"<p>Determines Drag (air resistance) of this part.</p>"},{"location":"objects/world/Part/#Forward","title":"Forward :       Vector3","text":"<p>Returns the forward vector of the part</p>"},{"location":"objects/world/Part/#HideStuds","title":"HideStuds : <code>boolean</code>","text":"<p>Determines whether to display studs on the part or not.</p>"},{"location":"objects/world/Part/#IsSpawn","title":"IsSpawn : <code>boolean</code>","text":"<p>Specifies whether the part can be used as a spawn location or not.</p>"},{"location":"objects/world/Part/#Mass","title":"Mass : <code>number</code>","text":"<p>Specifies the mass of a part in kilograms.</p>"},{"location":"objects/world/Part/#Material","title":"Material :       PartMaterial","text":"<p>Specifies the material of the part.</p> <p>Example</p> <pre><code>part.Material = PartMaterial.Concrete\n</code></pre>"},{"location":"objects/world/Part/#Shape","title":"Shape :       PartShape","text":"<p>Specifies the shape of a part.</p> <p>Example</p> <pre><code>part.Shape = PartShape.Wedge\n</code></pre>"},{"location":"objects/world/Part/#UseGravity","title":"UseGravity : <code>boolean</code>","text":"<p>Determines whether this part is affected by gravity or not.</p>"},{"location":"objects/world/Part/#Velocity","title":"Velocity :       Vector3","text":"<p>Specifies the velocity of a part.</p>"},{"location":"objects/world/Seat/","title":"Seat","text":"<p>  Seats are parts the player can sit on.</p>"},{"location":"objects/world/Seat/#events","title":"Events","text":""},{"location":"objects/world/Seat/#Sat","title":"Sat","text":"<p>Parameters: player [   Player ]</p> <p>Fires when a player sits in the seat.</p>"},{"location":"objects/world/Seat/#Vacated","title":"Vacated","text":"<p>Parameters: player [   Player ]</p> <p>Fires when a player leaves the seat.</p>"},{"location":"objects/world/Seat/#properties","title":"Properties","text":""},{"location":"objects/world/Seat/#Occupant","title":"Occupant :      Player","text":"<p>The player that is currently sitting in this seat.</p> <p>Example</p> <pre><code>seat.Occupant:Unsit()\n</code></pre>"},{"location":"objects/world/Text3D/","title":"Text3D","text":"<p>  Text3D allows for placement of text in the world.</p>"},{"location":"objects/world/Text3D/#properties","title":"Properties","text":""},{"location":"objects/world/Text3D/#Color","title":"Color :            Color","text":"<p>Specifies the color of the text.</p> <p>Example</p> <pre><code>-- Sets the text color to a random color\ntext.Color = Color.Random()\n</code></pre>"},{"location":"objects/world/Text3D/#FaceCamera","title":"FaceCamera : <code>boolean</code>","text":"<p>Determines whether or not the text should be facing the camera or not.</p> <p>Example</p> <pre><code>text.FaceCamera = true\n</code></pre>"},{"location":"objects/world/Text3D/#FontSize","title":"FontSize : <code>number</code>","text":"<p>Specifies the size of the font.</p> <p>Example</p> <pre><code>text.FontSize = 64\n</code></pre>"},{"location":"objects/world/Text3D/#HorizontalAlignment","title":"HorizontalAlignment :       HorizontalAlignment","text":"<p>Specifies the horizontal alignment of the text.</p> <p>Example</p> <pre><code>text.HorizontalAlignment = HorizontalAlignment.Left\n</code></pre>"},{"location":"objects/world/Text3D/#Text","title":"Text : <code>string</code>","text":"<p>Specifies the text to display.</p> <p>Example</p> <pre><code>text.Text = \"Hello world!\"\n</code></pre>"},{"location":"objects/world/Text3D/#VerticalAlignment","title":"VerticalAlignment :       VerticalAlignment","text":"<p>Specifies the vertical alignment of the text.</p> <p>Example</p> <pre><code>text.VerticalAlignment = VerticalAlignment.Middle\n</code></pre>"},{"location":"objects/world/Tool/","title":"Tool","text":"<p>  Tools are objects that can be held by players.</p>"},{"location":"objects/world/Tool/#events","title":"Events","text":""},{"location":"objects/world/Tool/#Activated","title":"Activated","text":"<p>Fires when the user clicks while holding the tool.</p> <p>Example</p> <pre><code>tool.Activated:Connect(function()\n    print(\"Tool has been activated!\")\nend)\n</code></pre>"},{"location":"objects/world/Tool/#Deactivated","title":"Deactivated","text":"<p>Gets fired when the user lets go of the mouse button while holding the tool.</p>"},{"location":"objects/world/Tool/#Equipped","title":"Equipped","text":"<p>Fired when the tool is equipped.</p>"},{"location":"objects/world/Tool/#Unequipped","title":"Unequipped","text":"<p>Fired when the tool is unequipped.</p>"},{"location":"objects/world/Tool/#methods","title":"Methods","text":""},{"location":"objects/world/Tool/#Play","title":"Play \u2192 <code>void</code>","text":"<p>Parameters: animationName [ <code>string</code> ]</p> <p>Plays an animation on the tool or the player that is currently holding the tool.</p> <p>Example</p> <pre><code>local tool = script.Parent\n\ntool.Activated:Connect(function()\n    tool:Play(\"slash\")\nend)\n</code></pre>"},{"location":"objects/world/Tool/#properties","title":"Properties","text":""},{"location":"objects/world/Tool/#Droppable","title":"Droppable : <code>boolean</code>","text":"<p>Determines whether the tool can be dropped by the player or not.</p> <p>Example</p> <pre><code>tool.Droppable = true\n</code></pre>"},{"location":"objects/world/Truss/","title":"Truss","text":"<p>  Trusses are parts that can be climbed by the player.</p>"},{"location":"removed/","title":"Removed Classes","text":"<p>This folder is used for containing all documentation pages that are no longer in recent Polytoria client and creator versions. They are noted here for documentation purposes.</p>"},{"location":"removed/RemoteEvent/","title":"RemoteEvent","text":"<p>TO-DO</p>"},{"location":"removed/UI/","title":"(Removed) UI","text":"<p>UI was a static class used for creating User Interface elements through LocalScripts. While it is possible to create UI elements in normal scripts, it will only work in local playtesting and not on server.</p>"},{"location":"removed/UI/#methods","title":"Methods","text":""},{"location":"removed/UI/#CreateButton","title":"CreateButton \u2192      UIButton","text":"<p>Creates a GUI Button</p> <p>Example</p> <pre><code>local button = UI:CreateButton()\nbutton.Size = Vector2.New(200,100)\nbutton:ApplyAnchorPreset(AnchorPreset.Center)\n</code></pre>"},{"location":"removed/UI/#CreateEmpty","title":"CreateEmpty \u2192     UIField","text":"<p>Creates an empty UIField</p> <p>Example</p> <pre><code>local empty = UI:CreateEmpty()\n</code></pre>"},{"location":"removed/UI/#CreateImage","title":"CreateImage \u2192     UIImage","text":"<p>Creates an UI image.</p> <p>Example</p> <pre><code>local image = UI:CreateImage()\nimage.ImageID = 12384\nimage.ApplyAnchorPreset(AnchorPreset.Center)\nimage.Size = Vector2.New(200,200)\n</code></pre>"},{"location":"removed/UI/#CreateLabel","title":"CreateLabel \u2192     UILabel","text":"<p>Parameters: text [ <code>string</code> ]</p> <p>Creates a text label.</p> <p>Example</p> <pre><code>local text = UI:CreateLabel()\ntext.ApplyAnchorPreset(AnchorPreset.Center)\ntext.Size = Vector2.New(200, 32)\ntext.Text = \"Hello, world!\"\n</code></pre>"},{"location":"removed/UI/#CreateHorizontalLayout","title":"CreateHorizontalLayout \u2192     UIHorizontalLayout","text":"<p>Creates a horizontal UI layout.</p> <p>Example</p> <pre><code>local layout = UI:CreateHorizontalLayout()\n</code></pre>"},{"location":"removed/UI/#CreateVerticalLayout","title":"CreateVerticalLayout \u2192     UIVerticalLayout","text":"<p>Creates a horizontal UI layout.</p> <p>Example</p> <pre><code>local layout = UI:CreateVerticalLayout()\n</code></pre>"},{"location":"removed/UI/#properties","title":"Properties","text":""},{"location":"removed/UI/#ScreenHeight","title":"ScreenHeight : <code>number</code>","text":"<p>Get current user's screen height</p> <p>Example</p> <pre><code>local Background = UI:CreateImage()\nBackground.ImageID = 12384\nBackground.ApplyAnchorPreset(AnchorPreset.Center)\nBackground.Size = Vector2.New(UI.ScreenWidth,UI.ScreenHeight)\n</code></pre>"},{"location":"removed/UI/#ScreenWidth","title":"ScreenWidth : <code>number</code>","text":"<p>Get current user's screen width</p> <p>Example</p> <pre><code>local Background = UI:CreateImage()\nBackground.ImageID = 12384\nBackground.ApplyAnchorPreset(AnchorPreset.Center)\nBackground.Size = Vector2.New(UI.ScreenWidth,UI.ScreenHeight)\n</code></pre>"},{"location":"tutorials/basic-scripting/","title":"Basic Scripting","text":"<p>Scripting in Polytoria is done using the Lua programming language. This chapter of tutorials will help you to learn and to familiarize yourself with the programming language as well as Polytoria's Scripting API.</p>"},{"location":"tutorials/basic-scripting/accessing-objects/","title":"Accessing Objects in a Script","text":"<p>To interact with the world using a script, you must be able to access objects to modify their properties, call their functions or connect code to an event.</p> <p>You may access objects in the world like how you would access children of a table. Every object is a descendant of <code>game</code>. To help you understand this, you may look at the Explorer, which has every object listed in the way it needs to be accessed using code.</p> <p>If you have multiple objects with the same name under the same parent, the script will use the first object it finds with that name. Additionally, you may use :FindChild(<code>instance name here</code>) as well.</p> <p>Example:</p> <pre><code>game[\"Environment\"][\"myPart\"]\ngame[\"Environment\"]:FindChild(\"myPart\")\n</code></pre> <p><code>Environment</code> is a child of <code>game</code> and <code>myPart</code> is a child of <code>Environment</code>.</p> <p>You may use variables to hold references to objects.</p> <pre><code>local myPart = game[\"Environment\"][\"myPart\"]\n</code></pre> <p>You may store references to objects in tables.</p> <pre><code>local parts = {\n    game[\"Environment\"][\"myPart\"],\n    game[\"Environment\"][\"Index's Epic Tool\"],\n    game[\"Environment\"][\"Baggy Man Light\"],\n    game[\"Environment\"]:FindChild(\"Diving for Treasure Text3D\")\n}\n</code></pre> <p>Accessing a child of an object that doesn't exist results in an error:</p> <pre><code>-- Will error: \"Cannot index nil\"\ngame[\"Environment\"][\"Non-existant Object\"][\"myPart2\"]\n</code></pre> <p>Accessing a non-existant child of an object will not error instantly, but further use cases might do:</p> <pre><code>local part = game[\"Environment\"][\"Existing Model\"][\"Non existing Part\"]\n\n-- Will error: \"Cannot index nil\"\nlocal light = part[\"Light source\"]\n\n-- Will error: \"Cannot index nil\"\nlocal price = part:FindChild(\"PriceValue\")\n</code></pre> <p>Accessing a non-existant child of an object will return <code>nil</code>, which we can use to check if an object exists:</p> <pre><code>if game[\"Environment\"][\"myPart\"] ~= nil then\n    print(\"myPart exists!\")\nend\n\n-- :FindChild() returns nil if no objects are found\nif game[\"Environment\"]:FindChild(\"my second Part\") == nil then\n    print(\"my second Part doesn't exist!\")\nend\n</code></pre> <p>View Modifying Object Properties to find out how to modify object properties.</p>"},{"location":"tutorials/basic-scripting/modifying-object-properties/","title":"Modifying Object Properties","text":"<p>Modifying object properties is a vital part of scripting, as it allows you to manipulate objects.</p> <p>To get and set properties, you need a reference to the object itself. View Accessing Objects in a Script for more info.</p> <p>To access a property, you may use the dot notation.</p> <p>Example:</p> <pre><code>game[\"Environment\"][\"myPart\"].Position\n</code></pre> <p>Tip: To see a list of properties, that the object may have, you can view its documentation or look at its properties below the Explorer.</p> <p>That alone will already return the value of the property. Although nothing is being done with it. You may use something like <code>print()</code> to print out the value to the console.</p> <p>Example:</p> <pre><code>print(game[\"Environment\"][\"myPart\"].Position)\n</code></pre> <p>To set the property, you may do it how you would set variables.</p> <p>Example:</p> <pre><code>game[\"Environment\"][\"myPart\"].Position = Vector3.New(10,10,10)\n</code></pre> <p>There are certain properties that can't be changed:</p> <pre><code>-- Will error, the property 'ClassName' is read-only.\ngame[\"Environment\"][\"myPart\"].ClassName = \"StringValue\"\n</code></pre> <p>Tip: To see which properties are read-only, you may look them up in the Documentation.</p> <p>Changing the <code>Name</code> and <code>Parent</code> properties, which every object has, will affect how you access that object in the script. Changing the <code>Name</code> property renames the object and changing the <code>Parent</code> will move the object to a new Parent in the place structure.</p> <p>Example using <code>Name</code>:</p> <pre><code>-- myPart gets renamed to epicPart\ngame[\"Environment\"][\"myPart\"].Name = \"epicPart\"\n\n-- You can no longer access that part using game[\"Environment\"][\"myPart\"], as its name changed.\nprint(game[\"Environment\"][\"epicPart\"].Name) -- Prints out \"epicPart\"\n</code></pre> <p>Example using <code>Parent</code>:</p> <pre><code>-- myPart gets reparented to game[\"Hidden\"]\ngame[\"Environment\"][\"myPart\"].Parent = game[\"Hidden\"]\n\n-- You can no longer access that part using game[\"Environment\"][\"myPart\"], as its parent, and thus its location in the place structure, changed.\nprint(game[\"Hidden\"][\"myPart\"].Parent.Name) -- Prints out \"Hidden\"\n</code></pre> <p>References to object will not be lost, despite the object being renamed and moved to new parents:</p> <pre><code>local myPart = game[\"Environment\"][\"myPart\"]\n\nmyPart.Name = \"The Part\"\n\n-- We can still access the same object using the variable, despite it changing names.\nprint(myPart.Name) -- Prints out \"The Part\"\n\n\nmyPart.Parent = game[\"ScriptService\"]\n\n-- We can also still access the same object using the variable, despite it being reparented.\nprint(myPart.Parent.Name) -- Prints out \"ScriptService\"\n</code></pre>"},{"location":"tutorials/getting-started/","title":"Getting Started","text":"<p>To get you started with making your own places, you may use the Documentation and Tutorials here to learn the Creator as well as the Scripting API.</p> <p>View Setting up Polytoria Creator to set up the Creator and view Understanding Creator's Interface to learn the Creator Interface.</p> <p>If you are ready to learn further, you may visit Basic Scripting to begin learning scripting on Polytoria.</p>"},{"location":"tutorials/getting-started/creator-interface/","title":"Understanding Creator's Interface","text":"<p>This page will explain you everything about the Creator Interface.</p> <p>When you start the creator via the \"Launch Creator\" button on the Create page, you will see the following screen:</p> <p></p>"},{"location":"tutorials/getting-started/creator-interface/#setup-wizard","title":"Setup Wizard","text":"<ol> <li>Starter Places - You can pick one of these template to start creating your place.</li> <li>Your Places - This is a list of your recently edited places. You can pick one of these to continue editing.</li> <li>Close - This button will close the Setup Wizard.</li> </ol>"},{"location":"tutorials/getting-started/creator-interface/#main-interface","title":"Main Interface","text":"<ol> <li>Menu Bar - Access various menus including: File, Edit, Insert, Model and Tools. View Menu Bar Options further below to learn more.</li> <li>Toolbar - Access various tools such as Select, Move, Rotate, Scale and others. View Toolbar Tools further below to learn more.</li> <li>Toolbox - Insert models created by other users into your place. See Publishing Models (TODO) to publish your own.</li> <li>Explorer - View and modify the place structure. You will need this to move objects from one parent to another.</li> <li>Properties - Modify the various properties of the selected object.</li> <li>Scene View - The place's scene. The gizmos from the Select, Move, Scale and Rotate tools will appear here for you to use. The Paint, Color, Brush and Material tools require you to click objects within the Scene View.</li> </ol>"},{"location":"tutorials/getting-started/creator-interface/#menu-bar-options","title":"Menu Bar Options","text":"<ol> <li>File \u2500 Create, open, save and publish places as well as exiting the Creator.</li> <li>Edit \u2500 Undo and Redo your actions as well as deleting, duplicating, grouping and ungrouping objects.</li> <li>Insert \u2500 Insert various objects into the place.</li> <li>Model \u2500 You can use this menu to import, export or publish your models.</li> <li>Tools \u2500 You can use this menu to test the place.</li> </ol>"},{"location":"tutorials/getting-started/creator-interface/#toolbar-tools","title":"Toolbar Tools","text":"<ol> <li>Select \u2500 Click an object within the Scene View to select it. You may hold Shift while clicking to select additional objects. You may also drag your mouse to select an area of parts at once.</li> <li>Move \u2500 Move the selected object(s).</li> <li>Rotate \u2500 Rotate the selected object(s).</li> <li>Scale \u2500 Scale the selected object(s).</li> <li>Snapping \u2500 Change or toggle the snapping of the Move and Rotate tools.</li> <li>Paint \u2500 Paint an object by clicking on it in the Scene View.</li> <li>Color \u2500 Select the color to use with the Paint tool.</li> <li>Brush \u2500 Apply a material to an object by clicking on it in the Scene View.</li> <li>Material \u2500 Select the material to use with the brush tool.</li> <li>Create Part \u2500 Create a new part.</li> <li>Create Script \u2500 Create a new script.</li> <li>Create Sound \u2500 Create a new sound.</li> </ol>"},{"location":"tutorials/getting-started/creator-interface/#toolbox","title":"Toolbox","text":"<ol> <li>Filter \u2500 Filter the Toolbox between the recently uploaded models and your uploaded models.</li> <li>Search \u2500 Search the Toolbox.</li> <li>Refresh \u2500 Refresh the Toolbox.</li> <li>Previous \u2500 Go to previous page of the Toolbox.</li> <li>Next \u2500 Go to next page of the Toolbox.</li> </ol>"},{"location":"tutorials/getting-started/creator-interface/#publish-place-menu","title":"Publish Place Menu","text":"<ol> <li>Your Places \u2500 Select a place to publish to.</li> <li>Place Info \u2500 View the select place's title, place icon and the creation and last updated dates.</li> <li>Publish to Polytoria \u2500 Publish the Place to Polytoria.</li> <li>Create New Place \u2500 Create a new place.</li> <li>Close \u2500 Close the Publish Place Menu.</li> </ol>"},{"location":"tutorials/getting-started/creator-setup/","title":"Setting up Polytoria Creator","text":"<p>Polytoria Creator, available for Windows, Mac and Linux, is a tool to make your own places on Polytoria.</p>"},{"location":"tutorials/getting-started/creator-setup/#system-requirements","title":"System Requirements","text":"Operating System Windows MacOS Linux Operating System Version Windows 10 21H1+ and Windows 11 High Sierra 11+ Ubuntu 20.04+, Fedora 38+, Debian 12+ CPU x86, x64 architecture with SSE2 instruction set support. Apple Silicon, x64 architecture with SSE2. x64 architecture with SSE2 instruction set support. Graphics API DX10, DX11, DX12 capable. Metal capable Intel and AMD GPUs OpenGL 3.2+, Vulkan capable. RAM At least 4GB+ Internet Connection An internet connection is required to update the creator and connect to its services. <p>A 2-button mouse with a scroll wheel is also recommended.</p>"},{"location":"tutorials/getting-started/creator-setup/#launching-the-creator","title":"Launching the Creator","text":"<ol> <li>Go to the Create page.</li> <li>Click the \"Launch Creator\" button or the \"Edit\" button on any place.</li> <li>The Launcher will open and perform an update, if necessary.</li> <li>The Creator should open and authenticate with Polytoria.</li> </ol> <p>Note: If you haven't downloaded the Launcher yet, you must download it from the Places page.</p>"},{"location":"tutorials/getting-started/creator-setup/#coding-in-the-creator","title":"Coding in the creator","text":"<p>To code in Polytoria Creator we recommend you to use a IDE(Integrated Development Envieronment). These are some of the widely used IDEs: Visual Studio Code and Sublime Text, these are examples, you can use whatever IDE you want, even Notepad. After installing, when editing a script, your system will ask where should it open the script file, select the IDE you choose and code!</p>"},{"location":"tutorials/getting-started/creator-setup/#going-further","title":"Going further","text":"<p>You should now be ready to learn the Creator's Interface. View Understanding Creator's Interface to learn more.</p>"}]}